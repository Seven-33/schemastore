{
  "version": "1.0.0-beta.1",
  "runLogs": [
    {
      "toolInfo": {
        "name": "BinSkim",
        "fullName": "BinSkim 1.2.1-beta",
        "version": "1.2.1"
      },
      "runInfo": {
        "invocationInfo": "BinSkim.exe  analyze d:\\src\\binskim-ms\\src\\FunctionalTestsData\\ --recurse --verbose --policy default -o d:\\repros\\out.sarif",
        "analysisTargets": [
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Readme.txt"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/Fixed.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/__security_cookie.c"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/TestWarn/GenerateTestBinaries.bat"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/TestWarn/testwarn.c"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/Fixed.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.ilk"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/Broken.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.ilk"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.pdb"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe"
          },
          {
            "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.pdb"
          }
        ]
      },
      "results": [
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'Compiled2003.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nCompiled2003.obj built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstdafx.obj built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nabort.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\natox.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\na_cmp.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\na_env.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\na_loc.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\na_map.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\na_str.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nchkesp.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nchkstk.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nclose.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncloseall.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncmiscdat.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncommit.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nconvrtcp.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncrt0.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncrt0dat.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncrt0fp.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncrt0init.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncrt0msg.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncrtmbox.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nctype.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ndays.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ndbgdel.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ndbgheap.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ndbghook.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ndbgrpt.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ndelete2.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ndosmap.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\neh3valid.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nerror.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nexpand.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nexsup.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nexsup3.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nfclose.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nfflush.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nfgetc.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nfgetpos.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nfputc.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nframe.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nfree.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nfseek.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nfseeki64.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nfsetpos.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nftell.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nftelli64.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nfwrite.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ngetenv.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ngetqloc.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nhandler.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nheapchk.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nheapinit.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nhooks.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninit.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninitcoll.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninitctyp.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninithelp.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninitmon.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninitnum.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninitsect.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninittime.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nioinit.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nisatty.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nisctype.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nismbspc.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nlconv.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nllmul.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nlowhelpr.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nlseek.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nlseeki64.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nmalloc.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nmbctype.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nmbschr.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nmbsnbico.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nmemcmp.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nmemcpy.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nmemmove.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nmemset.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nnlsdata1.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nnlsdata2.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nnlsdata3.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nonexit.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nosfinfo.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\noutput.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\npdblkup.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nread.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nrealloc.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nresetstk.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsbheap.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsecchk.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nseccinit.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nseccook.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsecfail.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsetenv.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsetlocal.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsetvbuf.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsnprintf.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsprintf.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstack.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstdargv.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstdenvp.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstdexcpt.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstrcat.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nstrchr.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nstrcmp.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nstrcspn.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nstrftime.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstricmp.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstrlen.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nstrncmp.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nstrncpy.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nstrnicmp.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstrpbrk.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nthrow.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ntimeset.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ntolower.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ntrnsctrl.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ntypinfo.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ntzset.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nulldiv.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nullrem.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nungetc.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nunhandld.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nuserapi.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nvalidate.obj (LIBCD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nvsnprint.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nwctomb.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nwinsig.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nwinxfltr.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nwrite.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nwtombenv.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nw_loc.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nxtoa.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_filbuf.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_file.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_flsbuf.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_freebuf.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_getbuf.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_newmode.obj (LIBCD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_stricmp.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\n_strnicm.obj (LIBCD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\ncout.obj (libcpd.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nios.obj (libcpd.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\niosptrs.obj (libcpd.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nlocale0.obj (libcpd.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nnewop.obj (libcpd.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nnomemory.obj (libcpd.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstring.obj (libcpd.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nuncaught.obj (libcpd.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nxdebug.obj (libcpd.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_tolower.obj (libcpd.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_toupper.obj (libcpd.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Compiled2003.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Compiled2003.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Compiled2003.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'Compiled2003.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Compiled2003.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Compiled2003.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Compiled2003.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'Compiled2003.exe' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Compiled2003.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (7.10) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'Compiled2003.exe' contains code from an unknown language, preventing a comprehensive analysis of the compiler warning settings. The language could not be identified for the following modules: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'Compiled2003.exe' was compiled at too low a warning level (effective warning level 0 for one or more modules). Warning level 3 enables important static analysis in the compiler to flag bugs that can lead to memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted. An example compiler command line triggering this check: \r\nModules triggering this check: abort.obj (LIBCD.lib) [warning level: 0]\r\natox.obj (LIBCD.lib) [warning level: 0]\r\na_cmp.obj (LIBCD.lib) [warning level: 0]\r\na_env.obj (LIBCD.lib) [warning level: 0]\r\na_loc.obj (LIBCD.lib) [warning level: 0]\r\na_map.obj (LIBCD.lib) [warning level: 0]\r\na_str.obj (LIBCD.lib) [warning level: 0]\r\nchkesp.obj (LIBCD.lib) [warning level: 0]\r\nclose.obj (LIBCD.lib) [warning level: 0]\r\ncloseall.obj (LIBCD.lib) [warning level: 0]\r\ncommit.obj (LIBCD.lib) [warning level: 0]\r\nconvrtcp.obj (LIBCD.lib) [warning level: 0]\r\ncrt0.obj (LIBCD.lib) [warning level: 0]\r\ncrt0dat.obj (LIBCD.lib) [warning level: 0]\r\ncrt0fp.obj (LIBCD.lib) [warning level: 0]\r\ncrt0msg.obj (LIBCD.lib) [warning level: 0]\r\ncrtmbox.obj (LIBCD.lib) [warning level: 0]\r\nctype.obj (LIBCD.lib) [warning level: 0]\r\ndbgdel.obj (LIBCD.lib) [warning level: 0]\r\ndbgheap.obj (LIBCD.lib) [warning level: 0]\r\ndbghook.obj (LIBCD.lib) [warning level: 0]\r\ndbgrpt.obj (LIBCD.lib) [warning level: 0]\r\ndelete2.obj (LIBCD.lib) [warning level: 0]\r\ndosmap.obj (LIBCD.lib) [warning level: 0]\r\neh3valid.obj (LIBCD.lib) [warning level: 0]\r\nerror.obj (LIBCD.lib) [warning level: 0]\r\nexpand.obj (LIBCD.lib) [warning level: 0]\r\nfclose.obj (LIBCD.lib) [warning level: 0]\r\nfflush.obj (LIBCD.lib) [warning level: 0]\r\nfgetc.obj (LIBCD.lib) [warning level: 0]\r\nfgetpos.obj (LIBCD.lib) [warning level: 0]\r\nfputc.obj (LIBCD.lib) [warning level: 0]\r\nframe.obj (LIBCD.lib) [warning level: 0]\r\nfree.obj (LIBCD.lib) [warning level: 0]\r\nfseek.obj (LIBCD.lib) [warning level: 0]\r\nfseeki64.obj (LIBCD.lib) [warning level: 0]\r\nfsetpos.obj (LIBCD.lib) [warning level: 0]\r\nftell.obj (LIBCD.lib) [warning level: 0]\r\nftelli64.obj (LIBCD.lib) [warning level: 0]\r\nfwrite.obj (LIBCD.lib) [warning level: 0]\r\ngetenv.obj (LIBCD.lib) [warning level: 0]\r\ngetqloc.obj (LIBCD.lib) [warning level: 0]\r\nhandler.obj (LIBCD.lib) [warning level: 0]\r\nheapchk.obj (LIBCD.lib) [warning level: 0]\r\nheapinit.obj (LIBCD.lib) [warning level: 0]\r\nhooks.obj (LIBCD.lib) [warning level: 0]\r\ninit.obj (LIBCD.lib) [warning level: 0]\r\ninitcoll.obj (LIBCD.lib) [warning level: 0]\r\ninitctyp.obj (LIBCD.lib) [warning level: 0]\r\ninithelp.obj (LIBCD.lib) [warning level: 0]\r\ninitmon.obj (LIBCD.lib) [warning level: 0]\r\ninitnum.obj (LIBCD.lib) [warning level: 0]\r\ninitsect.obj (LIBCD.lib) [warning level: 0]\r\ninittime.obj (LIBCD.lib) [warning level: 0]\r\nioinit.obj (LIBCD.lib) [warning level: 0]\r\nisatty.obj (LIBCD.lib) [warning level: 0]\r\nisctype.obj (LIBCD.lib) [warning level: 0]\r\nismbspc.obj (LIBCD.lib) [warning level: 0]\r\nlconv.obj (LIBCD.lib) [warning level: 0]\r\nlseek.obj (LIBCD.lib) [warning level: 0]\r\nlseeki64.obj (LIBCD.lib) [warning level: 0]\r\nmalloc.obj (LIBCD.lib) [warning level: 0]\r\nmbctype.obj (LIBCD.lib) [warning level: 0]\r\nmbschr.obj (LIBCD.lib) [warning level: 0]\r\nmbsnbico.obj (LIBCD.lib) [warning level: 0]\r\nonexit.obj (LIBCD.lib) [warning level: 0]\r\nosfinfo.obj (LIBCD.lib) [warning level: 0]\r\noutput.obj (LIBCD.lib) [warning level: 0]\r\npdblkup.obj (LIBCD.lib) [warning level: 0]\r\nread.obj (LIBCD.lib) [warning level: 0]\r\nrealloc.obj (LIBCD.lib) [warning level: 0]\r\nresetstk.obj (LIBCD.lib) [warning level: 0]\r\nsbheap.obj (LIBCD.lib) [warning level: 0]\r\nsecchk.obj (LIBCD.lib) [warning level: 0]\r\nseccinit.obj (LIBCD.lib) [warning level: 0]\r\nsecfail.obj (LIBCD.lib) [warning level: 0]\r\nsetenv.obj (LIBCD.lib) [warning level: 0]\r\nsetlocal.obj (LIBCD.lib) [warning level: 0]\r\nsetvbuf.obj (LIBCD.lib) [warning level: 0]\r\nsnprintf.obj (LIBCD.lib) [warning level: 0]\r\nsprintf.obj (LIBCD.lib) [warning level: 0]\r\nstack.obj (LIBCD.lib) [warning level: 0]\r\nstdargv.obj (LIBCD.lib) [warning level: 0]\r\nstdenvp.obj (LIBCD.lib) [warning level: 0]\r\nstdexcpt.obj (LIBCD.lib) [warning level: 0]\r\nstrftime.obj (LIBCD.lib) [warning level: 0]\r\nstricmp.obj (LIBCD.lib) [warning level: 0]\r\n(23 object files truncated from LIBCD.lib)\r\ncout.obj (libcpd.lib) [warning level: 0]\r\nios.obj (libcpd.lib) [warning level: 0]\r\niosptrs.obj (libcpd.lib) [warning level: 0]\r\nlocale0.obj (libcpd.lib) [warning level: 0]\r\nnewop.obj (libcpd.lib) [warning level: 0]\r\nnomemory.obj (libcpd.lib) [warning level: 0]\r\nstring.obj (libcpd.lib) [warning level: 0]\r\nuncaught.obj (libcpd.lib) [warning level: 0]\r\nxdebug.obj (libcpd.lib) [warning level: 0]\r\n_tolower.obj (libcpd.lib) [warning level: 0]\r\n_toupper.obj (libcpd.lib) [warning level: 0]\r\n(23 total objects truncated from 1 total libraries, use pdbinfo.exe to list all objects)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'Compiled2003.exe' contains code from an unknown language, preventing a comprehensive analysis of the stack protector buffer security features. The language could not be identified for the following modules: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'Compiled2003.exe' is a C or C++ binary built with the stack protector buffer security feature disabled in one or more modules. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. To resolve this issue, ensure that your code is compiled with the stack protector enabled by supplying /GS on the Visual C++ compiler command line. The affected modules were: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Compiled2003.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "does not contain a load configuration table",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Compiled2003.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Compiled2003.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "error",
          "fullMessage": "'Compiled2003.exe' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\BuildWithSecureTools\\Fail\\Compiled2003.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Compiled2003.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'managed2003.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nAssemblyInfo.obj built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nmanaged2003.obj built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstdafx.obj built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nabort.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\natox.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\na_cmp.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\na_env.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\na_loc.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\na_map.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\na_str.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncheckclr.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nchkstk.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nclose.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncloseall.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncmiscdat.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncommit.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nconvrtcp.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncrt0.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncrt0dat.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncrt0fp.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncrt0init.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncrt0msg.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ncrtmbox.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nctype.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ndays.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ndbgdel.obj (LIBCMTD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ndbgheap.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ndbghook.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ndbgrpt.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ndosmap.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\neh3valid.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nexpand.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nexsup.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nexsup3.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nfclose.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nfflush.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nframe.obj (LIBCMTD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nfree.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ngetenv.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ngetqloc.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nhandler.obj (LIBCMTD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nheapchk.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nheapinit.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nhooks.obj (LIBCMTD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninitcoll.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninitcrit.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninitctyp.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninithelp.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninitmon.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninitnum.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninitsect.obj (LIBCMTD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ninittime.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nioinit.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nisatty.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nisctype.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nlconv.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nllmul.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nloadcfg.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nlowhelpr.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nlseek.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nlseeki64.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nmalloc.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nmbctype.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nmbschr.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nmbsnbico.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nmemcmp.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nmemcpy.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nmemmove.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nmemset.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nmlock.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nnlsdata1.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nnlsdata2.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nnlsdata3.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nonexit.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nosfinfo.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\noutput.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nrealloc.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nresetstk.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsbheap.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsecchk.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nseccinit.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nseccook.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsecfail.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsetenv.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsetlocal.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsnprintf.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nsprintf.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstdargv.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstdenvp.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstdexcpt.obj (LIBCMTD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstrcat.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nstrchr.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nstrcmp.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nstrcspn.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nstrftime.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstricmp.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstrlen.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nstrncmp.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nstrncpy.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nstrnicmp.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstrpbrk.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nthrow.obj (LIBCMTD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ntidtable.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ntimeset.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ntolower.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ntrnsctrl.obj (LIBCMTD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ntypinfo.obj (LIBCMTD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\ntzset.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nulldiv.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nullrem.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nunhandld.obj (LIBCMTD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nvalidate.obj (LIBCMTD.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nvsnprint.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nwcscat.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nwcslen.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nwctomb.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nwinsig.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nwinxfltr.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nwrite.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nwtombenv.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nw_loc.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nxtoa.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_ctype.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_file.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_flsbuf.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_freebuf.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_getbuf.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_newmode.obj (LIBCMTD.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n_stricmp.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\n_strnicm.obj (LIBCMTD.lib) built with MASM compiler version 7.10.3077.0 (Front end version 0.0.0.0)\r\nnewop.obj (libcpmtd.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nnomemory.obj (libcpmtd.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nstring.obj (libcpmtd.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nxdebug.obj (libcpmtd.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nxlock.obj (libcpmtd.lib) built with Cxx compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\nxmtx.obj (libcpmtd.lib) built with C compiler version 13.10.3077.0 (Front end version 13.10.3077.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'managed2003.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'managed2003.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'managed2003.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'managed2003.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'managed2003.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'managed2003.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'managed2003.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'managed2003.exe' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'managed2003.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (7.10) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'managed2003.exe' was compiled at too low a warning level (effective warning level 0 for one or more modules). Warning level 3 enables important static analysis in the compiler to flag bugs that can lead to memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted. An example compiler command line triggering this check: \r\nModules triggering this check: managed2003.obj [warning level: 0]\r\nstdafx.obj [warning level: 0]\r\nabort.obj (LIBCMTD.lib) [warning level: 0]\r\natox.obj (LIBCMTD.lib) [warning level: 0]\r\na_cmp.obj (LIBCMTD.lib) [warning level: 0]\r\na_env.obj (LIBCMTD.lib) [warning level: 0]\r\na_loc.obj (LIBCMTD.lib) [warning level: 0]\r\na_map.obj (LIBCMTD.lib) [warning level: 0]\r\na_str.obj (LIBCMTD.lib) [warning level: 0]\r\ncheckclr.obj (LIBCMTD.lib) [warning level: 0]\r\nclose.obj (LIBCMTD.lib) [warning level: 0]\r\ncloseall.obj (LIBCMTD.lib) [warning level: 0]\r\ncommit.obj (LIBCMTD.lib) [warning level: 0]\r\nconvrtcp.obj (LIBCMTD.lib) [warning level: 0]\r\ncrt0.obj (LIBCMTD.lib) [warning level: 0]\r\ncrt0dat.obj (LIBCMTD.lib) [warning level: 0]\r\ncrt0fp.obj (LIBCMTD.lib) [warning level: 0]\r\ncrt0msg.obj (LIBCMTD.lib) [warning level: 0]\r\ncrtmbox.obj (LIBCMTD.lib) [warning level: 0]\r\nctype.obj (LIBCMTD.lib) [warning level: 0]\r\ndbgdel.obj (LIBCMTD.lib) [warning level: 0]\r\ndbgheap.obj (LIBCMTD.lib) [warning level: 0]\r\ndbghook.obj (LIBCMTD.lib) [warning level: 0]\r\ndbgrpt.obj (LIBCMTD.lib) [warning level: 0]\r\ndosmap.obj (LIBCMTD.lib) [warning level: 0]\r\neh3valid.obj (LIBCMTD.lib) [warning level: 0]\r\nexpand.obj (LIBCMTD.lib) [warning level: 0]\r\nfclose.obj (LIBCMTD.lib) [warning level: 0]\r\nfflush.obj (LIBCMTD.lib) [warning level: 0]\r\nframe.obj (LIBCMTD.lib) [warning level: 0]\r\nfree.obj (LIBCMTD.lib) [warning level: 0]\r\ngetenv.obj (LIBCMTD.lib) [warning level: 0]\r\ngetqloc.obj (LIBCMTD.lib) [warning level: 0]\r\nhandler.obj (LIBCMTD.lib) [warning level: 0]\r\nheapchk.obj (LIBCMTD.lib) [warning level: 0]\r\nheapinit.obj (LIBCMTD.lib) [warning level: 0]\r\nhooks.obj (LIBCMTD.lib) [warning level: 0]\r\ninitcoll.obj (LIBCMTD.lib) [warning level: 0]\r\ninitcrit.obj (LIBCMTD.lib) [warning level: 0]\r\ninitctyp.obj (LIBCMTD.lib) [warning level: 0]\r\ninithelp.obj (LIBCMTD.lib) [warning level: 0]\r\ninitmon.obj (LIBCMTD.lib) [warning level: 0]\r\ninitnum.obj (LIBCMTD.lib) [warning level: 0]\r\ninitsect.obj (LIBCMTD.lib) [warning level: 0]\r\ninittime.obj (LIBCMTD.lib) [warning level: 0]\r\nioinit.obj (LIBCMTD.lib) [warning level: 0]\r\nisatty.obj (LIBCMTD.lib) [warning level: 0]\r\nisctype.obj (LIBCMTD.lib) [warning level: 0]\r\nlconv.obj (LIBCMTD.lib) [warning level: 0]\r\nlseek.obj (LIBCMTD.lib) [warning level: 0]\r\nlseeki64.obj (LIBCMTD.lib) [warning level: 0]\r\nmalloc.obj (LIBCMTD.lib) [warning level: 0]\r\nmbctype.obj (LIBCMTD.lib) [warning level: 0]\r\nmbschr.obj (LIBCMTD.lib) [warning level: 0]\r\nmbsnbico.obj (LIBCMTD.lib) [warning level: 0]\r\nmlock.obj (LIBCMTD.lib) [warning level: 0]\r\nonexit.obj (LIBCMTD.lib) [warning level: 0]\r\nosfinfo.obj (LIBCMTD.lib) [warning level: 0]\r\noutput.obj (LIBCMTD.lib) [warning level: 0]\r\nrealloc.obj (LIBCMTD.lib) [warning level: 0]\r\nresetstk.obj (LIBCMTD.lib) [warning level: 0]\r\nsbheap.obj (LIBCMTD.lib) [warning level: 0]\r\nsecchk.obj (LIBCMTD.lib) [warning level: 0]\r\nseccinit.obj (LIBCMTD.lib) [warning level: 0]\r\nsecfail.obj (LIBCMTD.lib) [warning level: 0]\r\nsetenv.obj (LIBCMTD.lib) [warning level: 0]\r\nsetlocal.obj (LIBCMTD.lib) [warning level: 0]\r\nsnprintf.obj (LIBCMTD.lib) [warning level: 0]\r\nsprintf.obj (LIBCMTD.lib) [warning level: 0]\r\nstdargv.obj (LIBCMTD.lib) [warning level: 0]\r\nstdenvp.obj (LIBCMTD.lib) [warning level: 0]\r\nstdexcpt.obj (LIBCMTD.lib) [warning level: 0]\r\nstrftime.obj (LIBCMTD.lib) [warning level: 0]\r\nstricmp.obj (LIBCMTD.lib) [warning level: 0]\r\nstrnicmp.obj (LIBCMTD.lib) [warning level: 0]\r\nthrow.obj (LIBCMTD.lib) [warning level: 0]\r\ntidtable.obj (LIBCMTD.lib) [warning level: 0]\r\ntolower.obj (LIBCMTD.lib) [warning level: 0]\r\ntrnsctrl.obj (LIBCMTD.lib) [warning level: 0]\r\ntypinfo.obj (LIBCMTD.lib) [warning level: 0]\r\ntzset.obj (LIBCMTD.lib) [warning level: 0]\r\nunhandld.obj (LIBCMTD.lib) [warning level: 0]\r\nvalidate.obj (LIBCMTD.lib) [warning level: 0]\r\nvsnprint.obj (LIBCMTD.lib) [warning level: 0]\r\nwcscat.obj (LIBCMTD.lib) [warning level: 0]\r\nwcslen.obj (LIBCMTD.lib) [warning level: 0]\r\nwctomb.obj (LIBCMTD.lib) [warning level: 0]\r\nwinsig.obj (LIBCMTD.lib) [warning level: 0]\r\nwinxfltr.obj (LIBCMTD.lib) [warning level: 0]\r\nwrite.obj (LIBCMTD.lib) [warning level: 0]\r\nwtombenv.obj (LIBCMTD.lib) [warning level: 0]\r\nw_loc.obj (LIBCMTD.lib) [warning level: 0]\r\n(6 object files truncated from LIBCMTD.lib)\r\nnewop.obj (libcpmtd.lib) [warning level: 0]\r\nnomemory.obj (libcpmtd.lib) [warning level: 0]\r\nstring.obj (libcpmtd.lib) [warning level: 0]\r\nxdebug.obj (libcpmtd.lib) [warning level: 0]\r\nxlock.obj (libcpmtd.lib) [warning level: 0]\r\nxmtx.obj (libcpmtd.lib) [warning level: 0]\r\n(6 total objects truncated from 1 total libraries, use pdbinfo.exe to list all objects)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'managed2003.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'managed2003.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'managed2003.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'managed2003.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'managed2003.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "error",
          "fullMessage": "'managed2003.exe' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\BuildWithSecureTools\\Fail\\managed2003.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/managed2003.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'native2005.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nnative2005.obj built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nadjustfd.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nerror.obj (MSVCRTD.lib) built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nfp8.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\ninit.obj (MSVCRTD.lib) built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\ninitsect.obj (MSVCRTD.lib) built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nmerr.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\npdblkup.obj (MSVCRTD.lib) built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nstack.obj (MSVCRTD.lib) built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nuserapi.obj (MSVCRTD.lib) built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nwcrtexe.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nwdllargv.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nwildcard.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nxncommod.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nxthdloc.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nxtxtmode.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\n_newmode.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'native2005.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'native2005.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'native2005.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'native2005.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'native2005.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'native2005.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'native2005.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'native2005.exe' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'native2005.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (8.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'native2005.exe' was compiled at too low a warning level (effective warning level 0 for one or more modules). Warning level 3 enables important static analysis in the compiler to flag bugs that can lead to memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted. An example compiler command line triggering this check: \r\nModules triggering this check: atonexit.obj (MSVCRTD.lib) [warning level: 0]\r\nchandler4gs.obj (MSVCRTD.lib) [warning level: 0]\r\nerror.obj (MSVCRTD.lib) [warning level: 0]\r\nfp8.obj (MSVCRTD.lib) [warning level: 0]\r\ngs_report.obj (MSVCRTD.lib) [warning level: 0]\r\ngs_support.obj (MSVCRTD.lib) [warning level: 0]\r\ninit.obj (MSVCRTD.lib) [warning level: 0]\r\ninitsect.obj (MSVCRTD.lib) [warning level: 0]\r\nmerr.obj (MSVCRTD.lib) [warning level: 0]\r\npdblkup.obj (MSVCRTD.lib) [warning level: 0]\r\npesect.obj (MSVCRTD.lib) [warning level: 0]\r\nsecchk.obj (MSVCRTD.lib) [warning level: 0]\r\nstack.obj (MSVCRTD.lib) [warning level: 0]\r\nuserapi.obj (MSVCRTD.lib) [warning level: 0]\r\nwcrtexe.obj (MSVCRTD.lib) [warning level: 0]\r\nwdllargv.obj (MSVCRTD.lib) [warning level: 0]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'native2005.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'native2005.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "does not contain a load configuration table",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'native2005.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'native2005.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "error",
          "fullMessage": "'native2005.exe' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\BuildWithSecureTools\\Fail\\native2005.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'native2005x64.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nnative2005x64.obj built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nstdafx.obj built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\namdsecgs.obj (MSVCRTD.lib) built with MASM compiler version 8.0.50727.0 (Front end version 0.0.0.0)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nerror.obj (MSVCRTD.lib) built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\ngshandler.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\ninit.obj (MSVCRTD.lib) built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\ninitsect.obj (MSVCRTD.lib) built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nmerr.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\npdblkup.obj (MSVCRTD.lib) built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nstack.obj (MSVCRTD.lib) built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nuserapi.obj (MSVCRTD.lib) built with Cxx compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nwcrtexe.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nwdllargv.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nwildcard.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nxncommod.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nxthdloc.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nxtxtmode.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\n_newmode.obj (MSVCRTD.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'native2005x64.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'native2005x64.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'native2005x64.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'native2005x64.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'native2005x64.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'native2005x64.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'native2005x64.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'native2005x64.exe' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'native2005x64.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (8.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'native2005x64.exe' was compiled at too low a warning level (effective warning level 0 for one or more modules). Warning level 3 enables important static analysis in the compiler to flag bugs that can lead to memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted. An example compiler command line triggering this check: \r\nModules triggering this check: native2005x64.obj [warning level: 0]\r\natonexit.obj (MSVCRTD.lib) [warning level: 0]\r\nerror.obj (MSVCRTD.lib) [warning level: 0]\r\ngshandler.obj (MSVCRTD.lib) [warning level: 0]\r\ngs_report.obj (MSVCRTD.lib) [warning level: 0]\r\ngs_support.obj (MSVCRTD.lib) [warning level: 0]\r\ninit.obj (MSVCRTD.lib) [warning level: 0]\r\ninitsect.obj (MSVCRTD.lib) [warning level: 0]\r\nmerr.obj (MSVCRTD.lib) [warning level: 0]\r\npdblkup.obj (MSVCRTD.lib) [warning level: 0]\r\npesect.obj (MSVCRTD.lib) [warning level: 0]\r\nstack.obj (MSVCRTD.lib) [warning level: 0]\r\nuserapi.obj (MSVCRTD.lib) [warning level: 0]\r\nwcrtexe.obj (MSVCRTD.lib) [warning level: 0]\r\nwdllargv.obj (MSVCRTD.lib) [warning level: 0]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'native2005x64.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "error",
          "fullMessage": "'native2005x64.exe' does not declare itself as high entropy ASLR compatible. High entropy allows Address Space Layout Randomization to be more effective in mitigating memory corruption vulnerabilities. To resolve this issue, configure your tool chain to mark the program high entropy compatible; e.g. by supplying /HIGHENTROPYVA to the C or C++ linker command line. (This image was determined to have been properly compiled as /LARGEADDRESSAWARE.)",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'native2005x64.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'native2005x64.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "error",
          "fullMessage": "'native2005x64.exe' is a 64-bit image with a preferred base address below the 4GB boundary. Having a preferred base address below this boundary triggers a compatibility mode in Address Space Layout Randomization (ASLR) on recent versions of Windows that reduces the number of locations to which ASLR may relocate the binary. This reduces the effectiveness of ASLR at mitigating memory corruption vulnerabilities. To resolve this issue, either use the default preferred base address by removing any uses of /baseaddress from compiler command lines, or /BASE from linker command lines (recommended), or configure your program to start at a base address above 4GB when compiled for 64 bit platforms (by changing the constant passed to /baseaddress / /BASE). Note that if you choose to continue using a custom preferred base address, you will need to make this modification only for 64-bit builds, as base addresses above 4GB are not valid for 32-bit binaries.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'native2005x64.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\BuildWithSecureTools\\Fail\\native2005x64.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/native2005x64.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\BuildWithSecureTools\\Fail\\Readme.txt' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/Readme.txt",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'XRay.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nxray.obj built with Cxx compiler version 15.0.30729.1 (Front end version 15.0.30729.1)\r\nabort.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\namdsecgs.obj (LIBCMT.lib) built with MASM compiler version 9.0.30729.4148 (Front end version 0.0.0.0)\r\natodbl.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\natox.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\naw_com.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\na_cmp.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\na_loc.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\na_map.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\na_str.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncalloc.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncalloc_impl.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nchandler.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nchkstk.obj (LIBCMT.lib) built with MASM compiler version 9.0.30729.4148 (Front end version 0.0.0.0)\r\nclose.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncloseall.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncmiscdat.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncommit.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nconvrtcp.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncrt0dat.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncrt0fp.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncrt0init.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncrt0msg.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncrtheap.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncrtmbox.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nctype.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncvt.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ndays.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ndbghook.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ndelete.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ndelete2.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ndosmap.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ndrive.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nehstate.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nerrmode.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nfclose.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nfflush.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nfgetc.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nfgetpos.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nfgetwc.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nfileno.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nfputc.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nfputwc.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nframe.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nfree.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nfseek.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nfseeki64.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nfsetpos.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nftell.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nftelli64.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nfwrite.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ngetcwd.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ngetenv.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ngetqloc.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nglstatus.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ngshandler.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ngshandlereh.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ngs_cookie.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ngs_report.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ngs_support.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nhandler.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nhandlers.obj (LIBCMT.lib) built with MASM compiler version 9.0.30729.4148 (Front end version 0.0.0.0)\r\nheapinit.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nhooks.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ninitcoll.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ninitcon.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ninitcrit.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ninitctyp.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ninithelp.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ninitmon.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ninitnum.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ninittime.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ninvarg.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nioinit.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nisatty.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nisctype.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\niswctype.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\njmpuwind.obj (LIBCMT.lib) built with MASM compiler version 9.0.30729.4148 (Front end version 0.0.0.0)\r\nlconv.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nlseek.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nlseeki64.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nmalloc.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nmbctype.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nmbschr.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nmbsnbico.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nmbtowc.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nmbtowenv.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nmemchr.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nmemcmp.obj (LIBCMT.lib) built with MASM compiler version 9.0.30729.4148 (Front end version 0.0.0.0)\r\nmemcpy.obj (LIBCMT.lib) built with MASM compiler version 9.0.30729.4148 (Front end version 0.0.0.0)\r\nmemcpy_s.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nmemmove_s.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nmemset.obj (LIBCMT.lib) built with MASM compiler version 9.0.30729.4148 (Front end version 0.0.0.0)\r\nmlock.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nmsize.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nnew.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nnlsdata1.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nnlsdata2.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nonexit.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nosfinfo.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\noutput.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\noutputformat.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\noutputp.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\noutputs.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\npesect.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nprintf.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\npurevirt.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nputwch.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nrand_s.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nread.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nrealloc.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nrecalloc.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nsetenv.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nsetlocal.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nsetvbuf.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nsprintf.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstdexcpt.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstrcat_s.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstrchr.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstrcmp.obj (LIBCMT.lib) built with MASM compiler version 9.0.30729.4148 (Front end version 0.0.0.0)\r\nstrcpy_s.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstrcspn.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstrdup.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstrftime.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstricmp.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstrlen.obj (LIBCMT.lib) built with MASM compiler version 9.0.30729.4148 (Front end version 0.0.0.0)\r\nstrlen_s.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstrncmp.obj (LIBCMT.lib) built with MASM compiler version 9.0.30729.4148 (Front end version 0.0.0.0)\r\nstrncpy_s.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstrnicmp.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstrnicol.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstrpbrk.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstrrchr.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstrtol.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstrtoq.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nthrow.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ntidtable.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ntimeset.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ntolower.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ntoupper.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ntrnsctrl.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ntypinfo.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ntypname.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ntzset.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nundname.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nungetc.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nungetwc.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nunhandld.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nvalidate.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nvprintf.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nvsnprnc.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nvsprintf.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwcrt0.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwcschr.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwcscpy_s.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwcsdup.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwcslen.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwcslen_s.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwcsnicol.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwcsrchr.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwctomb.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwgetcwd.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwgetenv.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwinsig.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwinxfltr.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwrite.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwsetenv.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwstdargv.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwstdenvp.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwtombenv.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nw_cmp.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nw_env.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nw_loc.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nw_map.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nw_str.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nxtoas.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_cfout_.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_constpow_.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_ctype.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_filbuf.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_file.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_filwbuf.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_flsbuf.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_flswbuf.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_fpinit_.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_fptostr.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_freebuf.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_getbuf.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_initsect_.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_intrncvt_.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_mantold_.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_newmode.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_sftbuf.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_strgtold_.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_wctype.obj (LIBCMT.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_x10fout_.obj (LIBCMT.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncout.obj (libcpmt.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\niomanip.obj (libcpmt.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nios.obj (libcpmt.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\niosptrs.obj (libcpmt.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nlocale0.obj (libcpmt.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nnewaop.obj (libcpmt.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nstring.obj (libcpmt.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nuncaught.obj (libcpmt.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwcerr.obj (libcpmt.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nwcout.obj (libcpmt.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nxgetwctype.obj (libcpmt.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nxlock.obj (libcpmt.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nxmbtowc.obj (libcpmt.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nxmtx.obj (libcpmt.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nxmutex.obj (libcpmt.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nxtowlower.obj (libcpmt.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nxtowupper.obj (libcpmt.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nxwctomb.obj (libcpmt.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_tolower.obj (libcpmt.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_toupper.obj (libcpmt.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'XRay.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'XRay.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'XRay.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'XRay.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'XRay.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'XRay.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'XRay.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'XRay.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'XRay.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (9.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'XRay.exe' was compiled at too low a warning level (effective warning level 0 for one or more modules). Warning level 3 enables important static analysis in the compiler to flag bugs that can lead to memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted. An example compiler command line triggering this check: \r\nModules triggering this check: xray.obj [warning level: 0]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'XRay.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "error",
          "fullMessage": "'XRay.exe' does not declare itself as high entropy ASLR compatible. High entropy allows Address Space Layout Randomization to be more effective in mitigating memory corruption vulnerabilities. To resolve this issue, configure your tool chain to mark the program high entropy compatible; e.g. by supplying /HIGHENTROPYVA to the C or C++ linker command line. (This image was determined to have been properly compiled as /LARGEADDRESSAWARE.)",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'XRay.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'XRay.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'XRay.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'XRay.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\BuildWithSecureTools\\Fail\\vs2008\\XRay.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2008/XRay.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'comclient.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nclient.obj built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ncrtexe.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ndllargv.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nfp8.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nmerr.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nunhandld.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwildcard.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nxncommod.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nxthdloc.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nxtxtmode.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_error_.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_initsect_.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_init_.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_newmode.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_pdblkup_.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_stack_.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_userapi_.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nshguid.obj (shell32.lib) built with C compiler version 15.0.30729.207 (Front end version 15.0.30729.207)\r\nunknwn_i.obj (uuid.lib) built with C compiler version 15.0.30729.165 (Front end version 15.0.30729.165)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'comclient.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'comclient.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'comclient.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'comclient.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'comclient.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'comclient.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'comclient.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'comclient.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'comclient.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (10.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'comclient.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'comclient.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'comclient.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "does not contain a load configuration table",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'comclient.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'comclient.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'comclient.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\BuildWithSecureTools\\Fail\\vs2010\\comclient.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/comclient.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'vulnprocess.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nstdafx.obj built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nvulnprocess.obj built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nabort.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\natox.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\na_loc.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\na_map.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\na_str.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nchandler4.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nchkesp.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nchkstk.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nclose.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ncloseall.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ncmiscdat.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ncommit.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ncpu_disp.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ncrt0dat.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ncrt0fp.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ncrt0init.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ncrt0msg.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ncrtmbox.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ncrtmboxw.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nctype.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ndbgdel.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ndbgfree.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ndbgheap.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ndbghook.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ndbgmalloc.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ndbgrpt.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ndbgrptt.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ndbgrptw.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ndosmap.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nerrmode.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nexpand.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nexsup.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nexsup4.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nfclose.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nfflush.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nfileno.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nfputwc.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nframe.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nfree.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ngetqloc.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nglstatus.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ngs_cookie.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ngs_report.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ngs_support.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nhandler.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nheapchk.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nheapinit.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nhooks.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ninitcoll.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ninitcon.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ninitctyp.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ninithelp.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ninitmon.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ninitnum.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ninittime.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ninvarg.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nioinit.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nisatty.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nisctype.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\niswctype.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nlconv.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nllmul.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nllshl.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nlocalref.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nlowhelpr.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nlseeki64.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nmalloc.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nmbctype.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nmbstowcs.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nmbtowc.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nmemcmp.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nmemcpy.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nmemcpy_s.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nmemmove.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nmemset.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nmlock.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nnlsdata1.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nnlsdata2.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nonexit.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nosfinfo.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\noutput.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\noutputp.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\noutputs.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\np4_memcpy.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\np4_memset.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\npesect.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nprintf.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\npurevirt.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nputwch.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nrand_s.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nrealloc.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nsecchk.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nsetlocal.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nsprintf.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nstdexcpt.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nstrcat_s.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nstrcmp.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nstrcpy_s.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nstrcspn.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nstricmp.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nstrlen.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nstrncmp.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nstrncpy_s.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nstrnicmp.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nstrpbrk.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nstrtol.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nstrtoq.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nswprintf.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nthrow.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ntidtable.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ntolower.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ntypinfo.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ntypname.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nulldiv.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nullrem.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\nundname.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nunhandld.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nvalidate.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nvprintf.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nvsnprnc.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nvsprintf.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nvswprint.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nvswprnc.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nvwprintf.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwchtodig.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwcrt0.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwcscat_s.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwcscpy_s.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwcslen.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwcsncpy_s.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwcstol.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwcstombs.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwctomb.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwinsig.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwinxfltr.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwoutput.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwoutputp.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwoutputs.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwprintf.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwrite.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwstdargv.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nwstdenvp.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nw_env.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nxtoas.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nxtows.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_error_.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_file.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_flsbuf.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_flswbuf.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_freebuf.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_getbuf.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_initsect_.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_init_.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_newmode.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_pdblkup_.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_sftbuf.obj (LIBCMTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_stack_.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_strnicm.obj (LIBCMTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\n_trnsctrl_.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_userapi_.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_wctype.obj (LIBCMTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'vulnprocess.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'vulnprocess.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'vulnprocess.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'vulnprocess.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "error",
          "fullMessage": "'vulnprocess.exe' contains one or more code or data sections (.MengSec) which are marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to mutate memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you are required to share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'vulnprocess.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'vulnprocess.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'vulnprocess.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'vulnprocess.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (10.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'vulnprocess.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'vulnprocess.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'vulnprocess.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "does not contain a load configuration table",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'vulnprocess.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'vulnprocess.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'vulnprocess.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\BuildWithSecureTools\\Fail\\vs2010\\vulnprocess.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Fail/vs2010/vulnprocess.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\BuildWithSecureTools\\Pass\\MixedMode_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\BuildWithSecureTools\\Pass\\MixedMode_x86_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/MixedMode_x86_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\BuildWithSecureTools\\Pass\\Native_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_Default.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is an x86 binary which has an empty SE handler table in the load configuration table, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\BuildWithSecureTools\\Pass\\Native_x86_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/BuildWithSecureTools/Pass/Native_x86_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MinimalSafeBuffers.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "error",
          "fullMessage": "'MinimalSafeBuffers.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MinimalSafeBuffers.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MinimalSafeBuffers.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MinimalSafeBuffers.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MinimalSafeBuffers.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MinimalSafeBuffers.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MinimalSafeBuffers.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MinimalSafeBuffers.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MinimalSafeBuffers.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MinimalSafeBuffers.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MinimalSafeBuffers.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'MinimalSafeBuffers.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'MinimalSafeBuffers.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MinimalSafeBuffers.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'MinimalSafeBuffers.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'MinimalSafeBuffers.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotDisableStackProtectionForFunctions\\Fail\\MinimalSafeBuffers.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Fail/MinimalSafeBuffers.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'HelloWorld.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'HelloWorld.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'HelloWorld.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'HelloWorld.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'HelloWorld.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'HelloWorld.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'HelloWorld.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'HelloWorld.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'HelloWorld.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'HelloWorld.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'HelloWorld.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'HelloWorld.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'HelloWorld.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'HelloWorld.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'HelloWorld.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'HelloWorld.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'HelloWorld.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotDisableStackProtectionForFunctions\\Pass\\HelloWorld.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/HelloWorld.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'WhitelistedFunctions.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'WhitelistedFunctions.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'WhitelistedFunctions.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'WhitelistedFunctions.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'WhitelistedFunctions.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'WhitelistedFunctions.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'WhitelistedFunctions.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'WhitelistedFunctions.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'WhitelistedFunctions.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'WhitelistedFunctions.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'WhitelistedFunctions.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'WhitelistedFunctions.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'WhitelistedFunctions.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'WhitelistedFunctions.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'WhitelistedFunctions.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'WhitelistedFunctions.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'WhitelistedFunctions.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotDisableStackProtectionForFunctions\\Pass\\WhitelistedFunctions.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotDisableStackProtectionForFunctions/Pass/WhitelistedFunctions.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nminimalAtlUse.obj built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nabort.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nalloca16.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\natox.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\na_cmp.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\na_env.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\na_loc.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\na_map.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\na_str.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ncalloc.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ncalloc_impl.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nchandler4.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nchkstk.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\ncmiscdat.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nconvrtcp.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ncpu_disp.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ncrt0.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ncrt0dat.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ncrt0fp.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ncrt0init.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ncrt0msg.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ncrtheap.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ncrtmbox.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nctype.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ndays.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ndbghook.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ndelete.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ndelete2.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ndosmap.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nehvecdtr.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nerrmode.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nexsup.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\nexsup4.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\nfree.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ngetenv.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ngetqloc.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nglstatus.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ngs_cookie.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ngs_report.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ngs_support.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nhandler.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nheapinit.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nhooks.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ninitcoll.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ninitcrit.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ninitctyp.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ninithelp.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ninitmon.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ninitnum.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ninittime.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ninvarg.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nioinit.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nisctype.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nismbbyte.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\niswctype.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nlconv.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nllmul.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\nloadcfg.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nmalloc.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nmbctype.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nmbschr.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nmbsnbico.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nmemcmp.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nmemcpy.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\nmemmove.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\nmemset.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\nmlock.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nmsize.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nnlsdata1.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nnlsdata2.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nonexit.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\np4_memcpy.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\np4_memset.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\npesect.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\npurevirt.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nrand_s.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nrealloc.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nrecalloc.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nsbheap.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nsecchk.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nsehprolg4.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\nsetenv.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nsetlocal.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nstdargv.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nstdenvp.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nstrcat_s.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nstrchr.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\nstrcmp.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\nstrcpy_s.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nstrcspn.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\nstrdup.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nstrftime.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nstricmp.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nstrlen.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\nstrlen_s.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nstrncmp.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nstrncpy_s.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nstrnicmp.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nstrnicol.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nstrpbrk.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\nstrtol.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nstrtoq.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ntidtable.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ntimeset.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ntolower.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ntypinfo.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ntypname.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\ntzset.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nulldvrm.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\nundname.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nunhandld.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nwinsig.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nwinxfltr.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nwtombenv.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nw_loc.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nw_str.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\nxtoas.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\n_ctype.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\n_initsect_.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\n_newmode.obj (LIBCMT.lib) built with C compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\n_strnicm.obj (LIBCMT.lib) built with MASM compiler version 9.0.21022.8 (Front end version 0.0.0.0)\r\n_wctype.obj (LIBCMT.lib) built with Cxx compiler version 15.0.21022.8 (Front end version 15.0.21022.8)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "error",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' was built with a version of the Active Template Library (ATL) which is subject to the following issues: contains known remote execution bugs (see https://technet.microsoft.com/en-us/library/security/ms09-035.aspx).. To resolve this, compile your binary using an up-to-date copy of ATL.. The source files that triggered this were: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (9.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "error",
          "fullMessage": "'MinimalAtlUse_VS2008RTM.exe' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotIncorporateVulnerableDependencies\\Fail\\MinimalAtlUse_VS2008RTM.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Fail/MinimalAtlUse_VS2008RTM.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'NoVulnATL32.dll' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\ndllmain.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nnotvuln.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nNoVulnATL32.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nNoVulnATL32_i.obj built with C compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nstdafx.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nAllocate.obj (atlsd.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\natlbase.obj (atlsd.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\natlcommodule.obj (atlsd.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nAtlDebugAPI.obj (atlsd.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\natlthunk.obj (atlsd.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\natltrace.obj (atlsd.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nAtlTraceModuleManager.obj (atlsd.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\natlwinmodule.obj (atlsd.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nExterns.obj (atlsd.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nstdafx.obj (atlsd.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncrtdll.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ndelaopnt.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ndelopnt.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nehvecctr.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nehvecdtr.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nerror.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ninit.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ninitsect.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nloadcfg.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nnewaopnt.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nnewopnt.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nnothrow0.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npdblkup.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nstack.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nti_inst.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ntncleanup.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nuserapi.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncguid_i.obj (uuid.lib) built with C compiler version 16.10.30716.62 (Front end version 16.10.30716.57)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'NoVulnATL32.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'NoVulnATL32.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'NoVulnATL32.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'NoVulnATL32.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'NoVulnATL32.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'NoVulnATL32.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'NoVulnATL32.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'NoVulnATL32.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'NoVulnATL32.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'NoVulnATL32.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'NoVulnATL32.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'NoVulnATL32.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'NoVulnATL32.dll' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'NoVulnATL32.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'NoVulnATL32.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'NoVulnATL32.dll' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotIncorporateVulnerableDependencies\\Pass\\NoVulnATL32.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/NoVulnATL32.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'sha256.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'sha256.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'sha256.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'sha256.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'sha256.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'sha256.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'sha256.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'sha256.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'sha256.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "error",
          "fullMessage": "'sha256.exe' does not enable the control flow guard mitigation.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'sha256.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'sha256.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'sha256.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'sha256.exe' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'sha256.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'sha256.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'sha256.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotIncorporateVulnerableDependencies\\Pass\\sha256.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/sha256.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2013_Update4.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotIncorporateVulnerableDependencies\\Pass\\UnknownHash_VS2013_Update4.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2013_Update4.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "error",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' does not enable the control flow guard mitigation.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' contains code from an unknown language, preventing a comprehensive analysis of the compiler warning settings. The language could not be identified for the following modules: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' contains code from an unknown language, preventing a comprehensive analysis of the stack protector buffer security features. The language could not be identified for the following modules: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'UnknownHash_VS2015_Preview.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotIncorporateVulnerableDependencies\\Pass\\UnknownHash_VS2015_Preview.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/UnknownHash_VS2015_Preview.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'VS2013_With_Update3.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'VS2013_With_Update3.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'VS2013_With_Update3.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'VS2013_With_Update3.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'VS2013_With_Update3.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'VS2013_With_Update3.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'VS2013_With_Update3.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'VS2013_With_Update3.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'VS2013_With_Update3.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'VS2013_With_Update3.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'VS2013_With_Update3.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'VS2013_With_Update3.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'VS2013_With_Update3.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'VS2013_With_Update3.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'VS2013_With_Update3.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'VS2013_With_Update3.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'VS2013_With_Update3.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotIncorporateVulnerableDependencies\\Pass\\VS2013_With_Update3.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2013_With_Update3.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'VS2015_Preview.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'VS2015_Preview.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'VS2015_Preview.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'VS2015_Preview.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'VS2015_Preview.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'VS2015_Preview.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'VS2015_Preview.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'VS2015_Preview.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'VS2015_Preview.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "error",
          "fullMessage": "'VS2015_Preview.exe' does not enable the control flow guard mitigation.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'VS2015_Preview.exe' contains code from an unknown language, preventing a comprehensive analysis of the compiler warning settings. The language could not be identified for the following modules: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'VS2015_Preview.exe' contains code from an unknown language, preventing a comprehensive analysis of the stack protector buffer security features. The language could not be identified for the following modules: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'VS2015_Preview.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'VS2015_Preview.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'VS2015_Preview.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'VS2015_Preview.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'VS2015_Preview.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotIncorporateVulnerableDependencies\\Pass\\VS2015_Preview.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/VS2015_Preview.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'VulnATL32.dll' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\ndllmain.obj built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nstdafx.obj built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nVulnATL32.obj built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nVulnATL32_i.obj built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nvulncontrol.obj built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nAllocate.obj (atlsd.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\natlbase.obj (atlsd.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\natlcommodule.obj (atlsd.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nAtlDebugAPI.obj (atlsd.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\natlfuncs.obj (atlsd.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\natlthunk.obj (atlsd.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\natltrace.obj (atlsd.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nAtlTraceModuleManager.obj (atlsd.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\natlwinmodule.obj (atlsd.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nExterns.obj (atlsd.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nchkstk.obj (MSVCRTD.lib) built with MASM compiler version 10.0.30319.1 (Front end version 0.0.0.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ncrtdll.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nehvecctr.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nehvecdtr.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\nti_inst.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ntncleanup.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_error_.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_initsect_.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_init_.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_pdblkup_.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_stack_.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\n_userapi_.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\ncguid_i.obj (uuid.lib) built with C compiler version 15.0.30729.165 (Front end version 15.0.30729.165)\r\nieguids.obj (uuid.lib) built with C compiler version 15.0.30729.207 (Front end version 15.0.30729.207)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'VulnATL32.dll' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'VulnATL32.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (10.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'VulnATL32.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "does not contain a load configuration table",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'VulnATL32.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotIncorporateVulnerableDependencies\\Pass\\ATLVersion\\atl100\\VulnATL32.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl100/VulnATL32.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'VulnATL32.dll' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\ndllmain.obj built with Cxx compiler version 15.0.30729.1 (Front end version 15.0.30729.1)\r\nstdafx.obj built with Cxx compiler version 15.0.30729.1 (Front end version 15.0.30729.1)\r\nVulnATL32.obj built with Cxx compiler version 15.0.30729.1 (Front end version 15.0.30729.1)\r\nVulnATL32_i.obj built with C compiler version 15.0.30729.1 (Front end version 15.0.30729.1)\r\nvulncontrol.obj built with Cxx compiler version 15.0.30729.1 (Front end version 15.0.30729.1)\r\nAllocate.obj (atlsd.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\natlbase.obj (atlsd.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\natlcommodule.obj (atlsd.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nAtlDebugAPI.obj (atlsd.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\natlfuncs.obj (atlsd.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\natlthunk.obj (atlsd.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\natltrace.obj (atlsd.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nAtlTraceModuleManager.obj (atlsd.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\natlwinmodule.obj (atlsd.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nExterns.obj (atlsd.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nadjustfd.obj (MSVCRTD.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nchkstk.obj (MSVCRTD.lib) built with MASM compiler version 9.0.30729.4148 (Front end version 0.0.0.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncrtdll.obj (MSVCRTD.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncrtmanifestrtm.obj (MSVCRTD.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nehvecctr.obj (MSVCRTD.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nehvecdtr.obj (MSVCRTD.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\nti_inst.obj (MSVCRTD.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ntncleanup.obj (MSVCRTD.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_error_.obj (MSVCRTD.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_initsect_.obj (MSVCRTD.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_init_.obj (MSVCRTD.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_pdblkup_.obj (MSVCRTD.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_stack_.obj (MSVCRTD.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\n_userapi_.obj (MSVCRTD.lib) built with Cxx compiler version 15.0.30729.4148 (Front end version 15.0.30729.4148)\r\ncguid_i.obj (uuid.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\nieguids.obj (uuid.lib) built with C compiler version 14.0.50727.0 (Front end version 14.0.50727.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'VulnATL32.dll' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'VulnATL32.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (9.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'VulnATL32.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "does not contain a load configuration table",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'VulnATL32.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'VulnATL32.dll' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotIncorporateVulnerableDependencies\\Pass\\ATLVersion\\atl90\\VulnATL32.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotIncorporateVulnerableDependencies/Pass/ATLVersion/atl90/VulnATL32.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'badexecimports.exe' was not evaluated for check 'BuildWithSecureTools' as an exception occurred attempting to load its pdb: 'E_PDB_NO_DEBUG_INFO (Pdb is stripped of cv info)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "error",
          "fullMessage": "'badexecimports.exe' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as an exception occurred attempting to load its pdb: 'E_PDB_NO_DEBUG_INFO (Pdb is stripped of cv info)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "error",
          "fullMessage": "'badexecimports.exe' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as an exception occurred attempting to load its pdb: 'E_PDB_NO_DEBUG_INFO (Pdb is stripped of cv info)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "error",
          "fullMessage": "'badexecimports.exe' has the imports section marked executable. Because the loader will always mark the imports section as writable, it is important to mark this section as non-executable, so that an attacker cannot place shellcode here. To resolve this issue, ensure that your program does not mark the imports section as executable. Look for uses of /SECTION or /MERGE on the linker command line, or #pragma segment in source code, which change the imports section to be executable, or which merge the \".rdata\" segment into an executable section.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'badexecimports.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'badexecimports.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'badexecimports.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'badexecimports.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'badexecimports.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'badexecimports.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (10.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'badexecimports.exe' was not evaluated for check 'EnableCriticalCompilerWarnings' as an exception occurred attempting to load its pdb: 'E_PDB_NO_DEBUG_INFO (Pdb is stripped of cv info)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'badexecimports.exe' was not evaluated for check 'EnableStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NO_DEBUG_INFO (Pdb is stripped of cv info)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'badexecimports.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'badexecimports.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'badexecimports.exe' was not evaluated for check 'InitializeStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NO_DEBUG_INFO (Pdb is stripped of cv info)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'badexecimports.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'badexecimports.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Fail/badexecimports.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotMarkImportsSectionAsExecutable\\Pass\\MixedMode_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotMarkImportsSectionAsExecutable\\Pass\\MixedMode_x86_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkImportsSectionAsExecutable/Pass/MixedMode_x86_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotMarkWritableSectionsAsExecutable\\Fail\\Fixed.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/Fixed.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'TestFixed.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nFixed.obj built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\nfp8.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\nmerr.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\nunhandld.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\nwcrtexe.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\nwdllargv.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\nwildcard.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\nxncommod.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\nxthdloc.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\nxtxtmode.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\n_initsect_.obj (MSVCRTD.lib) built with Cxx compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\n_newmode.obj (MSVCRTD.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'TestFixed.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'TestFixed.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (10.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'TestFixed.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "does not contain a load configuration table",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'TestFixed.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' was not evaluated for check 'DoNotMarkImportsSectionAsExecutable' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' contains PE section(s) (.text) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "error",
          "fullMessage": "'VS2003-DotNetProgram-WithWritableCode.exe' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotMarkWritableSectionsAsExecutable\\Fail\\VS2003-DotNetProgram-WithWritableCode.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Fail/VS2003-DotNetProgram-WithWritableCode.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'AllFail32.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'AllFail32.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "error",
          "fullMessage": "'AllFail32.dll' contains one or more code or data sections (mysec) which are marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to mutate memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you are required to share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'AllFail32.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'AllFail32.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotMarkWritableSectionsAsExecutable\\Pass\\AllFail32.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/AllFail32.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotMarkWritableSectionsAsExecutable\\Pass\\MixedMode_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotMarkWritableSectionsAsExecutable\\Pass\\MixedMode_x86_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsExecutable/Pass/MixedMode_x86_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'AllFail32.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'AllFail32.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "error",
          "fullMessage": "'AllFail32.dll' contains one or more code or data sections (mysec) which are marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to mutate memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you are required to share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'AllFail32.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'AllFail32.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotMarkWritableSectionsAsShared\\Fail\\AllFail32.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail32.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "error",
          "fullMessage": "'AllFail64.dll' contains one or more code or data sections (mysec) which are marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to mutate memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you are required to share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'AllFail64.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotMarkWritableSectionsAsShared\\Fail\\AllFail64.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Fail/AllFail64.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotMarkWritableSectionsAsShared\\Pass\\MixedMode_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotMarkWritableSectionsAsShared\\Pass\\MixedMode_x86_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/MixedMode_x86_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection32.dll' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection32.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection32.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'PassSharedSection32.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'PassSharedSection32.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'PassSharedSection32.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection32.dll' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'PassSharedSection32.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'PassSharedSection32.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection32.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection32.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection32.dll' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection32.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection32.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection32.dll' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection32.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection32.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotMarkWritableSectionsAsShared\\Pass\\PassSharedSection32.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection32.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection64.dll' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection64.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection64.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'PassSharedSection64.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'PassSharedSection64.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'PassSharedSection64.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection64.dll' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'PassSharedSection64.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'PassSharedSection64.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection64.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection64.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection64.dll' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'PassSharedSection64.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection64.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection64.dll' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection64.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'PassSharedSection64.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotMarkWritableSectionsAsShared\\Pass\\PassSharedSection64.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotMarkWritableSectionsAsShared/Pass/PassSharedSection64.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotModifyStackProtectionCookie\\__security_cookie.c' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/__security_cookie.c",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'__security_cookie.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'__security_cookie.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'__security_cookie.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'__security_cookie.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'__security_cookie.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'__security_cookie.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "error",
          "fullMessage": "'__security_cookie.exe' is a C or C++ binary that interferes with the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector relies on a random number, called the \"security cookie\", to detect these buffer overflows. This 'cookie' is statically linked with your binary from a Visual C++ library in the form of the symbol __security_cookie. On recent Windows versions, the loader looks for the magic statically linked value of this cookie, and initializes the cookie with a far better source of entropy -- the system's secure random number generator -- rather than the limited random number generator available early in the C runtime startup code. When this symbol is not the default value, the additional entropy is not injected by the operating system, reducing the effectiveness of the stack protector. To resolve this issue, ensure that your code does not reference or create a symbol named __security_cookie or __security_cookie_complement. NOTE: the modified cookie value detected was: 0",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'__security_cookie.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'__security_cookie.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'__security_cookie.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'__security_cookie.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'__security_cookie.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'__security_cookie.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'__security_cookie.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'__security_cookie.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'__security_cookie.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'__security_cookie.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotModifyStackProtectionCookie\\Fail\\__security_cookie.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Fail/__security_cookie.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' is a C or C++ binary that is not required to initialize the stack protection, as it does not contain executable code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'internal.io.filesystem.primitives.ni.dll' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotModifyStackProtectionCookie\\Pass\\internal.io.filesystem.primitives.ni.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/internal.io.filesystem.primitives.ni.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotModifyStackProtectionCookie\\Pass\\Native_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/Native_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'vs2012.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nstdafx.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\nvs2012.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nerror.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nfp8.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ninit.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ninitsect.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nloadcfg.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nmerr.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\npdblkup.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nunhandld.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nuserapi.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwcrtexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwdllargv.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwildcard.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxncommod.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxthdloc.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxtxtmode.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n_newmode.obj (MSVCRTD.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'vs2012.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "'vs2012.exe' is an x86 binary which has an empty SE handler table in the load configuration table, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotModifyStackProtectionCookie\\Pass\\vs2012.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotModifyStackProtectionCookie/Pass/vs2012.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'msidcrl.dll' was not evaluated for check 'BuildWithSecureTools' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "error",
          "fullMessage": "'msidcrl.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "error",
          "fullMessage": "'msidcrl.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "error",
          "fullMessage": "'msidcrl.dll' has the imports section marked executable. Because the loader will always mark the imports section as writable, it is important to mark this section as non-executable, so that an attacker cannot place shellcode here. To resolve this issue, ensure that your program does not mark the imports section as executable. Look for uses of /SECTION or /MERGE on the linker command line, or #pragma segment in source code, which change the imports section to be executable, or which merge the \".rdata\" segment into an executable section.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'msidcrl.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'msidcrl.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'msidcrl.dll' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "error",
          "fullMessage": "Version information for 'msidcrl.dll' could not be parsed. The binary therefore could not be verified not to be an obsolete binary that is known to be vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'msidcrl.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'msidcrl.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (8.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'msidcrl.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'msidcrl.dll' was not evaluated for check 'EnableStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "error",
          "fullMessage": "'msidcrl.dll' does not declare itself as high entropy ASLR compatible. High entropy allows Address Space Layout Randomization to be more effective in mitigating memory corruption vulnerabilities. To resolve this issue, configure your tool chain to mark the program high entropy compatible; e.g. by supplying /HIGHENTROPYVA to the C or C++ linker command line. (This image was determined to have been properly compiled as /LARGEADDRESSAWARE.)",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'msidcrl.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'msidcrl.dll' was not evaluated for check 'InitializeStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'msidcrl.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'msidcrl.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msidcrl.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'BuildWithSecureTools' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "error",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "error",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "error",
          "fullMessage": "'msxml6.dll' has the imports section marked executable. Because the loader will always mark the imports section as writable, it is important to mark this section as non-executable, so that an attacker cannot place shellcode here. To resolve this issue, ensure that your program does not mark the imports section as executable. Look for uses of /SECTION or /MERGE on the linker command line, or #pragma segment in source code, which change the imports section to be executable, or which merge the \".rdata\" segment into an executable section.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'msxml6.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'msxml6.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'msxml6.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "error",
          "fullMessage": "Version information for 'msxml6.dll' could not be parsed. The binary therefore could not be verified not to be an obsolete binary that is known to be vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'msxml6.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (7.10) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'EnableStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'msxml6.dll' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'InitializeStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "error",
          "fullMessage": "'msxml6.dll' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'BuildWithSecureTools' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "error",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "error",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "error",
          "fullMessage": "'xmllite.dll' has the imports section marked executable. Because the loader will always mark the imports section as writable, it is important to mark this section as non-executable, so that an attacker cannot place shellcode here. To resolve this issue, ensure that your program does not mark the imports section as executable. Look for uses of /SECTION or /MERGE on the linker command line, or #pragma segment in source code, which change the imports section to be executable, or which merge the \".rdata\" segment into an executable section.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'xmllite.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'xmllite.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'xmllite.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "error",
          "fullMessage": "Version information for 'xmllite.dll' could not be parsed. The binary therefore could not be verified not to be an obsolete binary that is known to be vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'xmllite.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (7.10) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'EnableStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'xmllite.dll' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'InitializeStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "error",
          "fullMessage": "'xmllite.dll' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Fail/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotShipVulnerableBinaries\\Pass\\MixedMode_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\DoNotShipVulnerableBinaries\\Pass\\MixedMode_x86_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/MixedMode_x86_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'BuildWithSecureTools' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "error",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "error",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'msxml6.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'msxml6.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'msxml6.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'msxml6.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'msxml6.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'msxml6.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (10.10) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'EnableStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'msxml6.dll' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'InitializeStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'msxml6.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'msxml6.dll' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/msxml6.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'BuildWithSecureTools' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "error",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "error",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'xmllite.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'xmllite.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'xmllite.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'xmllite.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'xmllite.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'xmllite.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (10.10) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'EnableStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'xmllite.dll' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'InitializeStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'xmllite.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'xmllite.dll' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/DoNotShipVulnerableBinaries/Pass/xmllite.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'DoNotMarkImportsSectionAsExecutable' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'VS2003-DotNetProgram.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'VS2003-DotNetProgram.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'VS2003-DotNetProgram.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'VS2003-DotNetProgram.exe' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'VS2003-DotNetProgram.exe' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "error",
          "fullMessage": "'VS2003-DotNetProgram.exe' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableAddressSpaceLayoutRandomization\\Fail\\VS2003-DotNetProgram.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/VS2003-DotNetProgram.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'AllFail32.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'AllFail32.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "error",
          "fullMessage": "'AllFail32.dll' contains one or more code or data sections (mysec) which are marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to mutate memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you are required to share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'AllFail32.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'AllFail32.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'AllFail32.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableAddressSpaceLayoutRandomization\\Fail\\AllFail32\\AllFail32.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail32/AllFail32.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "error",
          "fullMessage": "'AllFail64.dll' contains one or more code or data sections (mysec) which are marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to mutate memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you are required to share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'AllFail64.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableAddressSpaceLayoutRandomization\\Fail\\AllFail64\\AllFail64.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/AllFail64/AllFail64.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'ManagedFail.dll' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\n.NETFramework,Version=v4.0.AssemblyAttributes.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nAssemblyInfo.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nManagedFail.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nmanagdeh.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nmsilexit.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nmstartup.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npuremsilcode.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncrtdll.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ndllmain.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ninitsect.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nloadcfg.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ntncleanup.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'ManagedFail.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'ManagedFail.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'ManagedFail.dll' is a C or C++ binary built with the stack protector buffer security feature disabled in one or more modules. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. To resolve this issue, ensure that your code is compiled with the stack protector enabled by supplying /GS on the Visual C++ compiler command line. The affected modules were: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'ManagedFail.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'ManagedFail.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "error",
          "fullMessage": "'ManagedFail.dll' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableAddressSpaceLayoutRandomization\\Fail\\ManagedFail\\ManagedFail.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Fail/ManagedFail/ManagedFail.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableAddressSpaceLayoutRandomization\\Pass\\MixedMode_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableAddressSpaceLayoutRandomization\\Pass\\MixedMode_x86_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/MixedMode_x86_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'PassDB32.dll' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'PassDB32.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'PassDB32.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'PassDB32.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'PassDB32.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "error",
          "fullMessage": "'PassDB32.dll' contains one or more code or data sections (mysec) which are marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to mutate memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you are required to share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'PassDB32.dll' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'PassDB32.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'PassDB32.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'PassDB32.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'PassDB32.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'PassDB32.dll' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'PassDB32.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'PassDB32.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'PassDB32.dll' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'PassDB32.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'PassDB32.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableAddressSpaceLayoutRandomization\\Pass\\PassDB32.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB32.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'PassDB64.dll' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'PassDB64.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'PassDB64.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'PassDB64.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'PassDB64.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "error",
          "fullMessage": "'PassDB64.dll' contains one or more code or data sections (mysec) which are marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to mutate memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you are required to share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'PassDB64.dll' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'PassDB64.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'PassDB64.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'PassDB64.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'PassDB64.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'PassDB64.dll' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'PassDB64.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'PassDB64.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'PassDB64.dll' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'PassDB64.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'PassDB64.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableAddressSpaceLayoutRandomization\\Pass\\PassDB64.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableAddressSpaceLayoutRandomization/Pass/PassDB64.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'Native_x64_VS2015_Default.dll' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "error",
          "fullMessage": "'Native_x64_VS2015_Default.dll' does not enable the control flow guard mitigation.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2015_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2015_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableControlFlowGuard\\Fail\\Native_x64_VS2015_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x64_VS2015_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2015_Default.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2015_Default.exe' does not enable the control flow guard mitigation.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2015_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is an x86 binary which has an empty SE handler table in the load configuration table, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2015_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableControlFlowGuard\\Fail\\Native_x86_VS2015_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Fail/Native_x86_VS2015_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableControlFlowGuard\\NotApplicable\\MixedMode_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'BuildWithSecureTools' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "error",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "error",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'EnableCriticalCompilerWarnings' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'EnableStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'InitializeStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableControlFlowGuard\\NotApplicable\\Native_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/NotApplicable/Native_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' enables the control flow guard mitigation.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2015_ControlFlowGuardEnabled.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableControlFlowGuard\\Pass\\Native_x64_VS2015_ControlFlowGuardEnabled.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x64_VS2015_ControlFlowGuardEnabled.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' enables the control flow guard mitigation.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_ControlFlowGuardEnabled.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableControlFlowGuard\\Pass\\Native_x86_VS2015_ControlFlowGuardEnabled.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableControlFlowGuard/Pass/Native_x86_VS2015_ControlFlowGuardEnabled.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' was compiled at too low a warning level (effective warning level 0 for one or more modules). Warning level 3 enables important static analysis in the compiler to flag bugs that can lead to memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted. An example compiler command line triggering this check: -nologo -Z7 -Fe:\"C:\\Dev\\Archive\\Releases\\SDL 7.0\\src\\BinScope\\BinScope.Test.Functional\\FunctionalChecks\\CompilerWarningsCheck\\black\\testwarn_noWswitch_FAIL.exe\" -MT -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\ATLMFC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\um\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\winrt\" -TC -X\r\nModules triggering this check: testwarn.obj [warning level: 0]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_noWswitch_FAIL.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Fail\\testwarn_noWswitch_FAIL.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_FAIL.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' was compiled at too low a warning level (effective warning level 0 for one or more modules). Warning level 3 enables important static analysis in the compiler to flag bugs that can lead to memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted. An example compiler command line triggering this check: -nologo -O2 -GL -Z7 -Fe\"C:\\Dev\\Archive\\Releases\\SDL 7.0\\src\\BinScope\\BinScope.Test.Functional\\FunctionalChecks\\CompilerWarningsCheck\\black\\testwarn_noWswitch_LTCG_FAIL.exe\" -MT -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\ATLMFC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\um\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\winrt\" -TC -X\r\nModules triggering this check: testwarn.obj [warning level: 0]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_noWswitch_LTCG_FAIL.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Fail\\testwarn_noWswitch_LTCG_FAIL.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_noWswitch_LTCG_FAIL.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' was compiled at too low a warning level (effective warning level 2 for one or more modules). Warning level 3 enables important static analysis in the compiler to flag bugs that can lead to memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted. An example compiler command line triggering this check: -nologo -Z7 -W2 -Fe:\"C:\\Dev\\Archive\\Releases\\SDL 7.0\\src\\BinScope\\BinScope.Test.Functional\\FunctionalChecks\\CompilerWarningsCheck\\black\\testwarn_W3_W2_FAIL.exe\" -MT -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\ATLMFC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\um\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\winrt\" -TC -X\r\nModules triggering this check: testwarn.obj [warning level: 2]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_W2_FAIL.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Fail\\testwarn_W3_W2_FAIL.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_FAIL.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' was compiled at too low a warning level (effective warning level 2 for one or more modules). Warning level 3 enables important static analysis in the compiler to flag bugs that can lead to memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted. An example compiler command line triggering this check: -nologo -Z7 -W2 -O2 -GL -Fe:\"C:\\Dev\\Archive\\Releases\\SDL 7.0\\src\\BinScope\\BinScope.Test.Functional\\FunctionalChecks\\CompilerWarningsCheck\\black\\testwarn_W3_W2_LTCG_FAIL.exe\" -MT -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\ATLMFC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\um\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\winrt\" -TC -X\r\nModules triggering this check: testwarn.obj [warning level: 2]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_W2_LTCG_FAIL.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Fail\\testwarn_W3_W2_LTCG_FAIL.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W3_W2_LTCG_FAIL.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' disables compiler warning(s) which are required by policy. A compiler warning is typically required if it has a high likelihood of flagging memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, enable the indicated warning(s) by removing /Wxxxx switches (where xxxx is a warning id indicated here) from your command line, and resolve any warnings subsequently raised during compilation. An example compiler command line triggering this check was: -nologo -Z7 -W4 -wd4018 -Fe:C:\\Dev\\Archive\\Main\\src\\BinScope\\BinScope.Test.Functional\\FunctionalChecks\\CompilerWarningsCheck\\black\\testwarn_W4_wd4018_FAIL.exe -MT -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\ATLMFC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\um\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\winrt\" -TC -X\r\nModules triggering this check were:\r\ntestwarn.obj [Explicitly disabled warnings: 4018]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_FAIL.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Fail\\testwarn_W4_wd4018_FAIL.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_FAIL.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' disables compiler warning(s) which are required by policy. A compiler warning is typically required if it has a high likelihood of flagging memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, enable the indicated warning(s) by removing /Wxxxx switches (where xxxx is a warning id indicated here) from your command line, and resolve any warnings subsequently raised during compilation. An example compiler command line triggering this check was: -nologo -O2 -GL -Z7 -W4 -wd4018 -Fe:C:\\Dev\\Archive\\Main\\src\\BinScope\\BinScope.Test.Functional\\FunctionalChecks\\CompilerWarningsCheck\\black\\testwarn_W4_wd4018_LTCG_FAIL.exe -MT -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\ATLMFC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\um\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\winrt\" -TC -X\r\nModules triggering this check were:\r\ntestwarn.obj [Explicitly disabled warnings: 4018]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4018_LTCG_FAIL.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Fail\\testwarn_W4_wd4018_LTCG_FAIL.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_W4_wd4018_LTCG_FAIL.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' was compiled at too low a warning level (effective warning level 2 for one or more modules). Warning level 3 enables important static analysis in the compiler to flag bugs that can lead to memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted. An example compiler command line triggering this check: -nologo -Z7 -Wall -W2 -Fe:\"C:\\Dev\\Archive\\Releases\\SDL 7.0\\src\\BinScope\\BinScope.Test.Functional\\FunctionalChecks\\CompilerWarningsCheck\\black\\testwarn_Wall_W2_FAIL.exe\" -MT -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\ATLMFC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\um\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\winrt\" -TC -X\r\nModules triggering this check: testwarn.obj [warning level: 2]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_W2_FAIL.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Fail\\testwarn_Wall_W2_FAIL.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_FAIL.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' was compiled at too low a warning level (effective warning level 2 for one or more modules). Warning level 3 enables important static analysis in the compiler to flag bugs that can lead to memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted. An example compiler command line triggering this check: -nologo -O2 -GL -Z7 -Wall -W2 -Fe:\"C:\\Dev\\Archive\\Releases\\SDL 7.0\\src\\BinScope\\BinScope.Test.Functional\\FunctionalChecks\\CompilerWarningsCheck\\black\\testwarn_Wall_W2_LTCG_FAIL.exe\" -MT -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\ATLMFC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\um\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\winrt\" -TC -X\r\nModules triggering this check: testwarn.obj [warning level: 2]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_W2_LTCG_FAIL.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Fail\\testwarn_Wall_W2_LTCG_FAIL.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_Wall_W2_LTCG_FAIL.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' disables compiler warning(s) which are required by policy. A compiler warning is typically required if it has a high likelihood of flagging memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, enable the indicated warning(s) by removing /Wxxxx switches (where xxxx is a warning id indicated here) from your command line, and resolve any warnings subsequently raised during compilation. An example compiler command line triggering this check was: -nologo -Z7 -wd4018 -W4 -Fe:C:\\Dev\\Archive\\Main\\src\\BinScope\\BinScope.Test.Functional\\FunctionalChecks\\CompilerWarningsCheck\\black\\testwarn_wd4018_W4_FAIL.exe -MT -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\ATLMFC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\um\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\winrt\" -TC -X\r\nModules triggering this check were:\r\ntestwarn.obj [Explicitly disabled warnings: 4018]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_FAIL.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Fail\\testwarn_wd4018_W4_FAIL.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_FAIL.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' disables compiler warning(s) which are required by policy. A compiler warning is typically required if it has a high likelihood of flagging memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, enable the indicated warning(s) by removing /Wxxxx switches (where xxxx is a warning id indicated here) from your command line, and resolve any warnings subsequently raised during compilation. An example compiler command line triggering this check was: -nologo -O2 -GL -Z7 -wd4018 -W4 -Fe:C:\\Dev\\Archive\\Main\\src\\BinScope\\BinScope.Test.Functional\\FunctionalChecks\\CompilerWarningsCheck\\black\\testwarn_wd4018_W4_LTCG_FAIL.exe -MT -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\ATLMFC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\um\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\include\\winrt\" -TC -X\r\nModules triggering this check were:\r\ntestwarn.obj [Explicitly disabled warnings: 4018]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4018_W4_LTCG_FAIL.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Fail\\testwarn_wd4018_W4_LTCG_FAIL.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Fail/testwarn_wd4018_W4_LTCG_FAIL.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W1_W4_LTCG_PASS.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_W1_W4_LTCG_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_LTCG_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W1_W4_PASS.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_W1_W4_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W1_W4_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_LTCG_PASS.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_W3_LTCG_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_LTCG_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_PASS.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_PASS.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_PASS.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_PASS.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_PASS.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_PASS.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_W3_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_W4_LTCG_PASS.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_W3_W4_LTCG_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_LTCG_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W3_W4_PASS.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_W3_W4_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W3_W4_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd4999_LTCG_PASS.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_W4_wd4999_LTCG_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_LTCG_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd4999_PASS.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_W4_wd4999_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd4999_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd703_LTCG_PASS.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_W4_wd703_LTCG_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_LTCG_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_W4_wd703_PASS.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_W4_wd703_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_W4_wd703_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_LTCG_PASS.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_Wall_LTCG_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_LTCG_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_PASS.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_PASS.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_PASS.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_PASS.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_PASS.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_PASS.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_Wall_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_LTCG_PASS.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_Wall_wd4018_we4018_LTCG_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_LTCG_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'testwarn_Wall_wd4018_we4018_PASS.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_Wall_wd4018_we4018_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_Wall_wd4018_we4018_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_wd4999_W4_LTCG_PASS.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_wd4999_W4_LTCG_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_LTCG_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'testwarn_wd4999_W4_PASS.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\Pass\\testwarn_wd4999_W4_PASS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/Pass/testwarn_wd4999_W4_PASS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\TestWarn\\GenerateTestBinaries.bat' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/TestWarn/GenerateTestBinaries.bat",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableCriticalCompilerWarnings\\TestWarn\\testwarn.c' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableCriticalCompilerWarnings/TestWarn/testwarn.c",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'vs2012.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nstdafx.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\nvs2012.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\namdsecgs.obj (MSVCRT.lib) built with MASM compiler version 11.0.50628.1 (Front end version 0.0.0.0)\r\natonexit.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ncinitexe.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_cookie.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_report.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_support.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ninitsect.obj (MSVCRT.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nloadcfg.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nmerr.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nnatstart.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\npesect.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nunhandld.obj (MSVCRT.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwcrtexe.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwdllargv.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwildcard.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxncommod.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxthdloc.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxtxtmode.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n_newmode.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "error",
          "fullMessage": "'vs2012.exe' does not declare itself as high entropy ASLR compatible. High entropy allows Address Space Layout Randomization to be more effective in mitigating memory corruption vulnerabilities. To resolve this issue, configure your tool chain to mark the program high entropy compatible; e.g. by supplying /HIGHENTROPYVA as well as /LARGEADDRESSAWARE to the C or C++ linker command line.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "error",
          "fullMessage": "'vs2012.exe' is a 64-bit image with a preferred base address below the 4GB boundary. Having a preferred base address below this boundary triggers a compatibility mode in Address Space Layout Randomization (ASLR) on recent versions of Windows that reduces the number of locations to which ASLR may relocate the binary. This reduces the effectiveness of ASLR at mitigating memory corruption vulnerabilities. To resolve this issue, either use the default preferred base address by removing any uses of /baseaddress from compiler command lines, or /BASE from linker command lines (recommended), or configure your program to start at a base address above 4GB when compiled for 64 bit platforms (by changing the constant passed to /baseaddress / /BASE). Note that if you choose to continue using a custom preferred base address, you will need to make this modification only for 64-bit builds, as base addresses above 4GB are not valid for 32-bit binaries.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableHighEntropyVirtualAddresses\\Fail\\HIGHENTROPYVA\\vs2012.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/HIGHENTROPYVA/vs2012.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'vs2012.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nstdafx.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\nvs2012.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\namdsecgs.obj (MSVCRT.lib) built with MASM compiler version 11.0.50628.1 (Front end version 0.0.0.0)\r\natonexit.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ncinitexe.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_cookie.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_report.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_support.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ninitsect.obj (MSVCRT.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nloadcfg.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nmerr.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nnatstart.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\npesect.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nunhandld.obj (MSVCRT.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwcrtexe.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwdllargv.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwildcard.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxncommod.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxthdloc.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxtxtmode.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n_newmode.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "error",
          "fullMessage": "'vs2012.exe' does not declare itself as high entropy ASLR compatible. High entropy allows Address Space Layout Randomization to be more effective in mitigating memory corruption vulnerabilities. To resolve this issue, configure your tool chain to mark the program high entropy compatible; e.g. by supplying /HIGHENTROPYVA to the C or C++ linker command line. (This image was determined to have been properly compiled as /LARGEADDRESSAWARE.)",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableHighEntropyVirtualAddresses\\Fail\\LARGEADDRESSAWARE\\vs2012.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/LARGEADDRESSAWARE/vs2012.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'vs2012.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nstdafx.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\nvs2012.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\namdsecgs.obj (MSVCRT.lib) built with MASM compiler version 11.0.50628.1 (Front end version 0.0.0.0)\r\natonexit.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ncinitexe.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_cookie.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_report.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_support.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ninitsect.obj (MSVCRT.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nloadcfg.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nmerr.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nnatstart.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\npesect.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nunhandld.obj (MSVCRT.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwcrtexe.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwdllargv.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwildcard.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxncommod.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxthdloc.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxtxtmode.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n_newmode.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "error",
          "fullMessage": "'vs2012.exe' does not declare itself as high entropy ASLR compatible. High entropy allows Address Space Layout Randomization to be more effective in mitigating memory corruption vulnerabilities. To resolve this issue, configure your tool chain to mark the program high entropy compatible; e.g. by supplying /HIGHENTROPYVA as well as /LARGEADDRESSAWARE to the C or C++ linker command line.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "error",
          "fullMessage": "'vs2012.exe' is a 64-bit image with a preferred base address below the 4GB boundary. Having a preferred base address below this boundary triggers a compatibility mode in Address Space Layout Randomization (ASLR) on recent versions of Windows that reduces the number of locations to which ASLR may relocate the binary. This reduces the effectiveness of ASLR at mitigating memory corruption vulnerabilities. To resolve this issue, either use the default preferred base address by removing any uses of /baseaddress from compiler command lines, or /BASE from linker command lines (recommended), or configure your program to start at a base address above 4GB when compiled for 64 bit platforms (by changing the constant passed to /baseaddress / /BASE). Note that if you choose to continue using a custom preferred base address, you will need to make this modification only for 64-bit builds, as base addresses above 4GB are not valid for 32-bit binaries.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableHighEntropyVirtualAddresses\\Fail\\Nothing\\vs2012.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Fail/Nothing/vs2012.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableHighEntropyVirtualAddresses\\Pass\\MixedMode_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/MixedMode_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'vs2012.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nstdafx.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\nvs2012.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\namdsecgs.obj (MSVCRT.lib) built with MASM compiler version 11.0.50628.1 (Front end version 0.0.0.0)\r\natonexit.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ncinitexe.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_cookie.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_report.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_support.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ninitsect.obj (MSVCRT.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nloadcfg.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nmerr.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nnatstart.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\npesect.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nunhandld.obj (MSVCRT.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwcrtexe.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwdllargv.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwildcard.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxncommod.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxthdloc.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxtxtmode.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n_newmode.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableHighEntropyVirtualAddresses\\Pass\\vs2012.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableHighEntropyVirtualAddresses/Pass/vs2012.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'vs2012.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nstdafx.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\nvs2012.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\natonexit.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nchandler4gs.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ncinitexe.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nfp8.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_cookie.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_report.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_support.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ninitsect.obj (MSVCRT.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nloadcfg.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nmerr.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nnatstart.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\npesect.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nsecchk.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nsehprolg4.obj (MSVCRT.lib) built with MASM compiler version 11.0.50628.1 (Front end version 0.0.0.0)\r\nunhandld.obj (MSVCRT.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwcrtexe.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwdllargv.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwildcard.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxncommod.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxthdloc.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxtxtmode.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n_newmode.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "'vs2012.exe' is an x86 binary which has an empty SE handler table in the load configuration table, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableSafeSEH\\Fail\\vs2012.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Fail/vs2012.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableSafeSEH\\Pass\\Fixed.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/Fixed.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableSafeSEH\\Pass\\MixedMode_x86_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/MixedMode_x86_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'PassSafeSEHNative.dll' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nPassSafeSEHNative.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\ndllsupp.obj (MSVCRTD.lib) built with MASM compiler version 11.0.50929.0 (Front end version 0.0.0.0)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nloadcfg.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'PassSafeSEHNative.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'PassSafeSEHNative.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'PassSafeSEHNative.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'PassSafeSEHNative.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "error",
          "fullMessage": "'PassSafeSEHNative.dll' contains one or more code or data sections (mysec) which are marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to mutate memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you are required to share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'PassSafeSEHNative.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'PassSafeSEHNative.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'PassSafeSEHNative.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'PassSafeSEHNative.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'PassSafeSEHNative.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'PassSafeSEHNative.dll' is a C or C++ binary built with the stack protector buffer security feature disabled in one or more modules. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. To resolve this issue, ensure that your code is compiled with the stack protector enabled by supplying /GS on the Visual C++ compiler command line. The affected modules were: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'PassSafeSEHNative.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'PassSafeSEHNative.dll' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'PassSafeSEHNative.dll' is a C or C++ binary that does not make use of the stack protection buffer security feature. It is therefore not required to initialize the feature.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'PassSafeSEHNative.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "error",
          "fullMessage": "'PassSafeSEHNative.dll' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableSafeSEH\\Pass\\PassSafeSEHNative.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/PassSafeSEHNative.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'TestFixed.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nFixed.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nfp8.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ninitsect.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nloadcfg.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nmerr.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nunhandld.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nwcrtexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nwdllargv.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nwildcard.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxncommod.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxthdloc.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxtxtmode.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n_newmode.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'TestFixed.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'TestFixed.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'TestFixed.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableSafeSEH\\Pass\\TestFixed.ilk' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableSafeSEH/Pass/TestFixed.ilk",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'BuildWithSecureTools' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'EnableCriticalCompilerWarnings' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'EnableStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is an x86 binary which has an empty SE handler table in the load configuration table, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'InitializeStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableStackProtection\\Fail\\broken\\Broken.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/Broken.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'TestFixed.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nBroken.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nfp8.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ninitsect.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nloadcfg.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nmerr.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nunhandld.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nwcrtexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nwdllargv.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nwildcard.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxncommod.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxthdloc.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxtxtmode.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n_newmode.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'TestFixed.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'TestFixed.exe' is a C or C++ binary built with the stack protector buffer security feature disabled in one or more modules. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. To resolve this issue, ensure that your code is compiled with the stack protector enabled by supplying /GS on the Visual C++ compiler command line. The affected modules were: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'TestFixed.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'TestFixed.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'TestFixed.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableStackProtection\\Fail\\broken\\TestFixed.ilk' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/broken/TestFixed.ilk",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'ConsoleNoGS.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nConsoleGS.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nalloca16.obj (MSVCRTD.lib) built with MASM compiler version 11.0.50929.0 (Front end version 0.0.0.0)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nchkstk.obj (MSVCRTD.lib) built with MASM compiler version 11.0.50929.0 (Front end version 0.0.0.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncrtexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ndllargv.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nerror.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nfp8.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ninit.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ninitsect.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nloadcfg.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nmerr.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npdblkup.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nstack.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nunhandld.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nuserapi.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nwildcard.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxncommod.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxthdloc.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxtxtmode.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n_newmode.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'ConsoleNoGS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'ConsoleNoGS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'ConsoleNoGS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'ConsoleNoGS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'ConsoleNoGS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'ConsoleNoGS.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'ConsoleNoGS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'ConsoleNoGS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'ConsoleNoGS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'ConsoleNoGS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'ConsoleNoGS.exe' is a C or C++ binary built with the stack protector buffer security feature disabled in one or more modules. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. To resolve this issue, ensure that your code is compiled with the stack protector enabled by supplying /GS on the Visual C++ compiler command line. The affected modules were: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'ConsoleNoGS.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'ConsoleNoGS.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'ConsoleNoGS.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'ConsoleNoGS.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'ConsoleNoGS.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableStackProtection\\Fail\\ConsoleNoGS\\ConsoleNoGS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ConsoleNoGS/ConsoleNoGS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'ManagedFail.dll' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\n.NETFramework,Version=v4.0.AssemblyAttributes.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nAssemblyInfo.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nManagedFail.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nmanagdeh.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nmsilexit.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nmstartup.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npuremsilcode.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncrtdll.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ndllmain.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ninitsect.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nloadcfg.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ntncleanup.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'ManagedFail.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'ManagedFail.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'ManagedFail.dll' is a C or C++ binary built with the stack protector buffer security feature disabled in one or more modules. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. To resolve this issue, ensure that your code is compiled with the stack protector enabled by supplying /GS on the Visual C++ compiler command line. The affected modules were: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'ManagedFail.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'ManagedFail.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "error",
          "fullMessage": "'ManagedFail.dll' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableStackProtection\\Fail\\ManagedFail\\ManagedFail.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/ManagedFail/ManagedFail.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'Mixed.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\n.NETFramework,Version=v4.0.AssemblyAttributes.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nAssemblyInfo.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nMixed.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nmanagdeh.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nManagedMain.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nmsilexit.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nmstartup.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npuremsilcode.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nwdllargv.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nwildcard.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxncommod.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxthdloc.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxtxtmode.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ninitsect.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nloadcfg.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nmerr.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Mixed.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Mixed.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Mixed.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'Mixed.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Mixed.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Mixed.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Mixed.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Mixed.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Mixed.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Mixed.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'Mixed.exe' is a C or C++ binary built with the stack protector buffer security feature disabled in one or more modules. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. To resolve this issue, ensure that your code is compiled with the stack protector enabled by supplying /GS on the Visual C++ compiler command line. The affected modules were: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Mixed.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'Mixed.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Mixed.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Mixed.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'Mixed.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableStackProtection\\Fail\\Mixed\\Mixed.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Fail/Mixed/Mixed.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableStackProtection\\Pass\\MixedMode_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableStackProtection\\Pass\\MixedMode_x86_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/MixedMode_x86_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableStackProtection\\Pass\\Native_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_Default.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is an x86 binary which has an empty SE handler table in the load configuration table, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableStackProtection\\Pass\\Native_x86_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/Native_x86_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'ConsoleGS.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nConsoleGS.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nalloca16.obj (MSVCRTD.lib) built with MASM compiler version 11.0.50929.0 (Front end version 0.0.0.0)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nchkstk.obj (MSVCRTD.lib) built with MASM compiler version 11.0.50929.0 (Front end version 0.0.0.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncrtexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ndllargv.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nerror.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nfp8.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ninit.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ninitsect.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nloadcfg.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nmerr.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npdblkup.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nstack.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nunhandld.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nuserapi.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nwildcard.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxncommod.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxthdloc.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nxtxtmode.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n_newmode.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'ConsoleGS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'ConsoleGS.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'ConsoleGS.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'ConsoleGS.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'ConsoleGS.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'ConsoleGS.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'ConsoleGS.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'ConsoleGS.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'ConsoleGS.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'ConsoleGS.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'ConsoleGS.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'ConsoleGS.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'ConsoleGS.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'ConsoleGS.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'ConsoleGS.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'ConsoleGS.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\EnableStackProtection\\Pass\\ConsoleGS\\ConsoleGS.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/EnableStackProtection/Pass/ConsoleGS/ConsoleGS.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'AllFail64.dll' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nAllFail64.obj built with Cxx compiler version 16.0.30319.1 (Front end version 16.0.30319.1)\r\namdsecgs.obj (MSVCRT.lib) built with MASM compiler version 10.0.30319.460 (Front end version 0.0.0.0)\r\ngs_cookie.obj (MSVCRT.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\ngs_report.obj (MSVCRT.lib) built with C compiler version 16.0.30319.460 (Front end version 16.0.30319.460)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (10.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'AllFail64.dll' was compiled at too low a warning level (effective warning level 0 for one or more modules). Warning level 3 enables important static analysis in the compiler to flag bugs that can lead to memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted. An example compiler command line triggering this check: \r\nModules triggering this check: AllFail64.obj [warning level: 0]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "error",
          "fullMessage": "'AllFail64.dll' does not declare itself as high entropy ASLR compatible. High entropy allows Address Space Layout Randomization to be more effective in mitigating memory corruption vulnerabilities. To resolve this issue, configure your tool chain to mark the program high entropy compatible; e.g. by supplying /HIGHENTROPYVA to the C or C++ linker command line. (This image was determined to have been properly compiled as /LARGEADDRESSAWARE.)",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'AllFail64.dll' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'AllFail64.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'AllFail64.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\InitializeStackProtection\\Fail\\AllFail64.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Fail/AllFail64.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'PassGSFriendlyInit32.dll' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nPassGSFriendlyInit32.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncrtdll.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ndllmain.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ninitsect.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nloadcfg.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ntncleanup.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit32.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit32.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit32.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit32.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "error",
          "fullMessage": "'PassGSFriendlyInit32.dll' contains one or more code or data sections (mysec) which are marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to mutate memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you are required to share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit32.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit32.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'PassGSFriendlyInit32.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'PassGSFriendlyInit32.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit32.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'PassGSFriendlyInit32.dll' is a C or C++ binary built with the stack protector buffer security feature disabled in one or more modules. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. To resolve this issue, ensure that your code is compiled with the stack protector enabled by supplying /GS on the Visual C++ compiler command line. The affected modules were: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'PassGSFriendlyInit32.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit32.dll' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit32.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'PassGSFriendlyInit32.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "error",
          "fullMessage": "'PassGSFriendlyInit32.dll' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\InitializeStackProtection\\Pass\\PassGSFriendly32\\PassGSFriendlyInit32.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSFriendly32/PassGSFriendlyInit32.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'PassGSFriendlyInit64.dll' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nPassGSFriendlyInit64.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncrtdll.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ndllmain.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ninitsect.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nloadcfg.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ntncleanup.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit64.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit64.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit64.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit64.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "error",
          "fullMessage": "'PassGSFriendlyInit64.dll' contains one or more code or data sections (mysec) which are marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to mutate memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you are required to share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit64.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit64.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'PassGSFriendlyInit64.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'PassGSFriendlyInit64.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit64.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'PassGSFriendlyInit64.dll' is a C or C++ binary built with the stack protector buffer security feature disabled in one or more modules. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. To resolve this issue, ensure that your code is compiled with the stack protector enabled by supplying /GS on the Visual C++ compiler command line. The affected modules were: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit64.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'PassGSFriendlyInit64.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit64.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'PassGSFriendlyInit64.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'PassGSFriendlyInit64.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\InitializeStackProtection\\Pass\\PassGSriendly64\\PassGSFriendlyInit64.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/InitializeStackProtection/Pass/PassGSriendly64/PassGSFriendlyInit64.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'vs2012.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nstdafx.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\nvs2012.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\namdsecgs.obj (MSVCRT.lib) built with MASM compiler version 11.0.50628.1 (Front end version 0.0.0.0)\r\natonexit.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ncinitexe.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_cookie.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_report.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_support.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ninitsect.obj (MSVCRT.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nloadcfg.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nmerr.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nnatstart.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\npesect.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nunhandld.obj (MSVCRT.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwcrtexe.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwdllargv.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwildcard.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxncommod.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxthdloc.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxtxtmode.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n_newmode.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "error",
          "fullMessage": "'vs2012.exe' is a 64-bit image with a preferred base address below the 4GB boundary. Having a preferred base address below this boundary triggers a compatibility mode in Address Space Layout Randomization (ASLR) on recent versions of Windows that reduces the number of locations to which ASLR may relocate the binary. This reduces the effectiveness of ASLR at mitigating memory corruption vulnerabilities. To resolve this issue, either use the default preferred base address by removing any uses of /baseaddress from compiler command lines, or /BASE from linker command lines (recommended), or configure your program to start at a base address above 4GB when compiled for 64 bit platforms (by changing the constant passed to /baseaddress / /BASE). Note that if you choose to continue using a custom preferred base address, you will need to make this modification only for 64-bit builds, as base addresses above 4GB are not valid for 32-bit binaries.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\LoadImageAboveFourGigabyteAddress\\Fail\\vs2012.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Fail/vs2012.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\LoadImageAboveFourGigabyteAddress\\Pass\\MixedMode_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/MixedMode_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'vs2012.exe' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nstdafx.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\nvs2012.obj built with Cxx compiler version 17.0.50727.1 (Front end version 17.0.50727.1)\r\namdsecgs.obj (MSVCRT.lib) built with MASM compiler version 11.0.50628.1 (Front end version 0.0.0.0)\r\natonexit.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ncinitexe.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_cookie.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_report.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ngs_support.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\ninitsect.obj (MSVCRT.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nloadcfg.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nmerr.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nnatstart.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\npesect.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nunhandld.obj (MSVCRT.lib) built with Cxx compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwcrtexe.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwdllargv.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nwildcard.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxncommod.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxthdloc.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\nxtxtmode.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n_newmode.obj (MSVCRT.lib) built with C compiler version 17.0.50628.1 (Front end version 17.0.50628.1)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'vs2012.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'vs2012.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\LoadImageAboveFourGigabyteAddress\\Pass\\vs2012.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/LoadImageAboveFourGigabyteAddress/Pass/vs2012.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'ManagedFail.dll' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\n.NETFramework,Version=v4.0.AssemblyAttributes.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nAssemblyInfo.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nManagedFail.obj built with Cxx compiler version 17.0.60315.1 (Front end version 17.0.60315.1)\r\nmanagdeh.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nmsilexit.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nmstartup.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npuremsilcode.obj (MSVCMRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\natonexit.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nchandler4gs.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncinitexe.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ncrtdll.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ndllmain.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_cookie.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_report.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ngs_support.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ninitsect.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nloadcfg.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nnatstart.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\npesect.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\nsecchk.obj (MSVCRTD.lib) built with C compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\ntncleanup.obj (MSVCRTD.lib) built with Cxx compiler version 17.0.50929.0 (Front end version 17.0.50929.0)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'ManagedFail.dll' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'ManagedFail.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (11.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'ManagedFail.dll' is a C or C++ binary built with the stack protector buffer security feature disabled in one or more modules. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. To resolve this issue, ensure that your code is compiled with the stack protector enabled by supplying /GS on the Visual C++ compiler command line. The affected modules were: Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.TruncatedCompilandRecordList",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'ManagedFail.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'ManagedFail.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'ManagedFail.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "error",
          "fullMessage": "'ManagedFail.dll' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\MarkImageAsNXCompatible\\Fail\\ManagedFail.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/ManagedFail.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'DoNotMarkImportsSectionAsExecutable' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'VS2003-DotNetProgram.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'VS2003-DotNetProgram.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'VS2003-DotNetProgram.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "error",
          "fullMessage": "'VS2003-DotNetProgram.exe' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'VS2003-DotNetProgram.exe' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'VS2003-DotNetProgram.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "error",
          "fullMessage": "'VS2003-DotNetProgram.exe' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\MarkImageAsNXCompatible\\Fail\\VS2003-DotNetProgram.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Fail/VS2003-DotNetProgram.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\MarkImageAsNXCompatible\\Pass\\MixedMode_x86_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/MixedMode_x86_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_Default.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is an x86 binary which has an empty SE handler table in the load configuration table, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\MarkImageAsNXCompatible\\Pass\\Native_x86_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'BuildWithSecureTools' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'EnableCriticalCompilerWarnings' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'EnableStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is an x86 binary which has an empty SE handler table in the load configuration table, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'InitializeStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/MarkImageAsNXCompatible/Pass/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "notApplicable",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' was not evaluated for check 'DoNotMarkImportsSectionAsExecutable' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'ManagedInteropAssemblyForAtlTestLibrary.dll' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedInteropAssemblyForAtlTestLibrary.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'ManagedResourcesOnly.dll' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'ManagedResourcesOnly.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'ManagedResourcesOnly.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "notApplicable",
          "fullMessage": "'ManagedResourcesOnly.dll' was not evaluated for check 'DoNotMarkImportsSectionAsExecutable' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'ManagedResourcesOnly.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'ManagedResourcesOnly.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'ManagedResourcesOnly.dll' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'ManagedResourcesOnly.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'ManagedResourcesOnly.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'ManagedResourcesOnly.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'ManagedResourcesOnly.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'ManagedResourcesOnly.dll' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'ManagedResourcesOnly.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'ManagedResourcesOnly.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'ManagedResourcesOnly.dll' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'ManagedResourcesOnly.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'ManagedResourcesOnly.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/ManagedResourcesOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "notApplicable",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' was not evaluated for check 'DoNotMarkImportsSectionAsExecutable' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is an IL-only managed assembly.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'Managed_x86_VS2013_Wpf.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\UsefulTestFiles\\Managed_x86_VS2013_Wpf.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Managed_x86_VS2013_Wpf.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\UsefulTestFiles\\MixedMode_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'BuildWithSecureTools' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "error",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "error",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'EnableCriticalCompilerWarnings' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'EnableStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'InitializeStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x64_VS2013_NoPdb.exe' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x64_VS2013_NoPdb.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\UsefulTestFiles\\MixedMode_x86_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'BuildWithSecureTools' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "error",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "error",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'EnableStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'InitializeStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'MixedMode_x86_VS2013_MissingPdb.dll' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/MixedMode_x86_VS2013_MissingPdb.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\UsefulTestFiles\\Native_x64_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\UsefulTestFiles\\Native_x64_VS2013_KernelModeDriver.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nguard_support.obj (BufferOverflowK.lib) built with C compiler version 17.0.65501.17013 (Front end version 17.0.65501.17013)\r\nloadcfg.obj (BufferOverflowK.lib) built with C compiler version 17.0.65501.17013 (Front end version 17.0.65501.17013)\r\nclassbind.obj (WdfDriverEntry.lib) built with Cxx compiler version 17.0.65501.17020 (Front end version 16.10.30716.57)\r\ninittypes.obj (WdfDriverEntry.lib) built with Cxx compiler version 17.0.65501.17020 (Front end version 16.10.30716.57)\r\nstub.obj (WdfDriverEntry.lib) built with Cxx compiler version 17.0.65501.17020 (Front end version 16.10.30716.57)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' was not evaluated for check 'DoNotMarkImportsSectionAsExecutable' as the analysis is not relevant based on observed binary metadata: image is a kernel mode binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' was not evaluated for check 'DoNotMarkWritableSectionsAsShared' as the analysis is not relevant based on observed binary metadata: image is a kernel mode binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' was not evaluated for check 'EnableAddressSpaceLayoutRandomization' as the analysis is not relevant based on observed binary metadata: image is a kernel mode binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is a kernel mode binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' disables compiler warning(s) which are required by policy. A compiler warning is typically required if it has a high likelihood of flagging memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, enable the indicated warning(s) by removing /Wxxxx switches (where xxxx is a warning id indicated here) from your command line, and resolve any warnings subsequently raised during compilation. An example compiler command line triggering this check was: -c -I\"c:\\Users\\mikefan\\documents\\visual studio 2013\\Projects\\Native_x64_VS2013_KernelModeDriver\\Native_x64_VS2013_KernelModeDriver\\x64\\Win7Debug\\\\\" -Zi -nologo -W4 -WX -Od -Oi -Oy- -D_WIN64 -D_AMD64_ -DAMD64 -DDEPRECATE_DDK_FUNCTIONS=1 -DMSC_NOOPT -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DWINNT=1 -DNTDDI_VERSION=0x06010000 -DDBG=1 -DKMDF_VERSION_MAJOR=1 -DKMDF_VERSION_MINOR=11 -GF -Gm- -Zp8 -GS -Gy -fp:precise -Zc:wchar_t- -Zc:forScope- -GR- -Gz -wd4748 -wd4603 -wd4627 -wd4986 -wd4987 -wd4996 -FI\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\Shared\\warning.h\" -errorreport:prompt -kernel -cbstring -d2epilogunwind -d1import_no_registry -d2AllowCompatibleILVersions -d2Zi+ -MT -I\"c:\\Users\\mikefan\\documents\\visual studio 2013\\Projects\\Native_x64_VS2013_KernelModeDriver\\Native_x64_VS2013_KernelModeDriver\\\\\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\km\\crt\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\KM\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\wdf\\kmdf\\1.11\" -TC -X\r\nModules triggering this check were:\r\nDevice.obj [Explicitly disabled warnings: 4996]\r\nDriver.obj [Explicitly disabled warnings: 4996]\r\nQueue.obj [Explicitly disabled warnings: 4996]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is a kernel mode binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is a kernel mode binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2013_KernelModeDriver.sys' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'Native_x64_VS2015_Default.dll' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "error",
          "fullMessage": "'Native_x64_VS2015_Default.dll' does not enable the control flow guard mitigation.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is high entropy ASLR compatible, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2015_Default.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is not a 32-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "pass",
          "fullMessage": "'Native_x64_VS2015_Default.dll' is a 64-bit image with a base address that is >= 4 gigabytes, increaseing the effectiveness of address space layout randomization (that helps prevent attackers from executing security-sensitive code in well-known locations).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'Native_x64_VS2015_Default.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\UsefulTestFiles\\Native_x64_VS2015_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x64_VS2015_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_Default.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is an x86 binary which has an empty SE handler table in the load configuration table, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\UsefulTestFiles\\Native_x86_VS2013_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\UsefulTestFiles\\Native_x86_VS2013_KernelModeDriver.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' was compiled with one or more modules which were not built using minimum required tool versions (compiler version 17.0.65501.17016, linker version 11.0.65501.17016). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\nguard_support.obj (BufferOverflowK.lib) built with C compiler version 17.0.65501.17013 (Front end version 17.0.65501.17013)\r\nloadcfg.obj (BufferOverflowK.lib) built with C compiler version 17.0.65501.17013 (Front end version 17.0.65501.17013)\r\nclassbind.obj (WdfDriverEntry.lib) built with Cxx compiler version 17.0.65501.17020 (Front end version 16.10.30716.57)\r\ninittypes.obj (WdfDriverEntry.lib) built with Cxx compiler version 17.0.65501.17020 (Front end version 16.10.30716.57)\r\nstub.obj (WdfDriverEntry.lib) built with Cxx compiler version 17.0.65501.17020 (Front end version 16.10.30716.57)\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' was not evaluated for check 'DoNotMarkImportsSectionAsExecutable' as the analysis is not relevant based on observed binary metadata: image is a kernel mode binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' was not evaluated for check 'DoNotMarkWritableSectionsAsShared' as the analysis is not relevant based on observed binary metadata: image is a kernel mode binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' was not evaluated for check 'EnableAddressSpaceLayoutRandomization' as the analysis is not relevant based on observed binary metadata: image is a kernel mode binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is a kernel mode binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' disables compiler warning(s) which are required by policy. A compiler warning is typically required if it has a high likelihood of flagging memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, enable the indicated warning(s) by removing /Wxxxx switches (where xxxx is a warning id indicated here) from your command line, and resolve any warnings subsequently raised during compilation. An example compiler command line triggering this check was: -c -I\"c:\\Users\\mikefan\\documents\\visual studio 2013\\Projects\\Native_x86_VS2013_KernelModeDriver\\Native_x86_VS2013_KernelModeDriver\\Win7Debug\\\\\" -Zi -nologo -W4 -WX -Od -Oi -Oy- -D_X86_=1 -Di386=1 -DSTD_CALL -DDEPRECATE_DDK_FUNCTIONS=1 -DMSC_NOOPT -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DWINNT=1 -DNTDDI_VERSION=0x06010000 -DDBG=1 -DKMDF_VERSION_MAJOR=1 -DKMDF_VERSION_MINOR=11 -GF -Gm- -Zp8 -GS -Gy -fp:precise -Zc:wchar_t- -Zc:forScope- -GR- -Gz -wd4748 -wd4603 -wd4627 -wd4986 -wd4987 -wd4996 -FI\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\Shared\\warning.h\" -analyze- -errorreport:prompt -kernel -cbstring -d1import_no_registry -d2AllowCompatibleILVersions -d2Zi+ -MT -I\"c:\\Users\\mikefan\\documents\\visual studio 2013\\Projects\\Native_x86_VS2013_KernelModeDriver\\Native_x86_VS2013_KernelModeDriver\\\\\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\km\\crt\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\KM\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\wdf\\kmdf\\1.11\" -TC -X\r\nModules triggering this check were:\r\nDevice.obj [Explicitly disabled warnings: 4996]\r\nDriver.obj [Explicitly disabled warnings: 4996]\r\nQueue.obj [Explicitly disabled warnings: 4996]\r\n",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is a kernel mode binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_KernelModeDriver.sys' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a kernel mode binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_KernelModeDriver.sys",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'BuildWithSecureTools' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings..",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'EnableCriticalCompilerWarnings' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'EnableStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is an x86 binary which has an empty SE handler table in the load configuration table, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'InitializeStackProtection' as an exception occurred attempting to load its pdb: 'E_PDB_NOT_FOUND (File not found)'",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_PdbMissing.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_PdbMissing.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' was not evaluated for check 'BuildWithSecureTools' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' was not evaluated for check 'DoNotModifyStackProtectionCookie' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' was not evaluated for check 'EnableControlFlowGuard' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' was not evaluated for check 'EnableStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' was not evaluated for check 'EnableSafeSEH' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' was not evaluated for check 'InitializeStackProtection' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2013_ResourceOnly.dll' was not evaluated for check 'MarkImageAsNXCompatible' as the analysis is not relevant based on observed binary metadata: image is a resource-only binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.dll",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\UsefulTestFiles\\Native_x86_VS2013_ResourceOnly.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2013_ResourceOnly.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' was built with a tool chain that satisfies configured policy (compiler minimum version 17.0.65501.17016, linker minimum version 11.0.65501.17016).",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' does not incorporate any known vulnerable dependencies, as configured by current policy.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2015_Default.exe' contains PE section(s) (.textbss) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2015_Default.exe' does not enable the control flow guard mitigation.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' was compiled at a secure warning level (2147483647) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosre, double-free and other security-related vulnerabilities do not exist in code.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2015",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2015_Default.exe' was not evaluated for check 'EnableHighEntropyVirtualAddresses' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is an x86 binary which has an empty SE handler table in the load configuration table, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2001",
          "kind": "notApplicable",
          "fullMessage": "'Native_x86_VS2015_Default.exe' was not evaluated for check 'LoadImageAboveFourGigabyteAddress' as the analysis is not relevant based on observed binary metadata: image is not a 64-bit binary.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "fullMessage": "'Native_x86_VS2015_Default.exe' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA1001",
          "kind": "notApplicable",
          "fullMessage": "'d:\\src\\binskim-ms\\src\\FunctionalTestsData\\UsefulTestFiles\\Native_x86_VS2015_Default.pdb' was not analyzed as it does not appear to be a valid portable executable.",
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///d:/src/binskim-ms/src/FunctionalTestsData/UsefulTestFiles/Native_x86_VS2015_Default.pdb",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}