{
  "rulesDirectory": ["node_modules/codelyzer"],
  "rules": {
    "align": [
      true,
      "parameters",
      "arguments",
      "statements"
    ], // Enforces vertical alignment for parameters, arguments and/or statements
    "ban": false, // Bans the use of specific functions
    "class-name": true, // Enforces PascalCased class and interface names
    "comment-format": [
      true,
      "check-space"
    ], // Enforces rules for single-line comments
    "curly": true, // Enforces braces for if/for/do/while statements
    "eofline": true, // Enforces the file to end with a newline
    "forin": false, // Enforces a for...in statement to be filtered with an if statement
    "indent": [
      true,
      "spaces"
    ], // Enforces consistent indentation levels
    "interface-name": [
      true,
      "always-prefix"
    ], // Enforces the rule that interface names must or must not begin with a capital 'I'
    "jsdoc-format": true, // Enforces basic format rules for jsdoc comments
    "label-position": false, // Enforces labels only on sensible statements
    "label-undefined": true, // Checks that labels are defined before usage
    "max-line-length": [
      true,
      100
    ], // Sets the maximum length of a line
    "member-access": false, // Enforces using explicit visibility on class members
    "member-ordering": [
      true,
      "public-before-private",
      "static-before-instance",
      "variable-before-functions"
    ], // Enforces chosen member ordering
    "no-any": true, // Disallows usages of any as a type decoration
    "no-arg": true, // Disallows access to arguments.callee
    "no-bitwise": true, // Disallows bitwise operators
    "no-conditional-assignment": false, // Disallows any type of assignment in any conditionals; this applies to do-while, for, if, and while statements
    "no-console": [
      false
    ], // Disallows access to the specified functions on console
    "no-consecutive-blank-lines": false, // Disallows having more than one blank line in a row in a file
    "no-construct": false, // Disallows access to the constructors of String, Number and Boolean
    "no-constructor-vars": false, // Disallows the public and private modifiers for constructor parameters
    "no-debugger": false, // Disallows debugger statements
    "no-duplicate-key": false, // Disallows duplicate keys in object literals
    "no-duplicate-variable": true, // Disallows duplicate variable declarations in the same block scope
    "no-shadowed-variable": true, // Disallows shadowed variable declarations
    "no-empty": false, // Disallows empty blocks
    "no-eval": true, // Disallows eval function invocations
    "no-inferrable-types": true, // Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean
    "no-internal-module": true, // Disallows internal module, use namespace instead
    "no-require-imports": false, // Disallows require() style imports
    "no-string-literal": false, // Disallows object access via string literals
    "no-switch-case-fall-through": false, // Disallows falling through case statements
    "no-trailing-comma": true, // Disallows trailing comma within object literals
    "no-trailing-whitespace": true, // Disallows trailing whitespace at the end of a line
    "no-unreachable": true, // Disallows unreachable code after break, catch, throw, and return statements
    "no-unused-expression": true, // Disallows unused expression statements
    "no-unused-variable": true, // Disallows unused imports, variables, functions and private class members
    "no-use-before-declare": false, // Disallows usage of variables before their declaration
    "no-var-keyword": false, // Disallows usage of the var keyword, use let or const instead
    "no-var-reqquires": false, // Disallows the use of require statements except in import statements
    "one-line": [
      true,
      "check-catch",
      "check-else",
      "check-open-brace",
      "check-whitespace"
    ], // Enforces the specified tokens to be on the same line as the expression preceding it
    "quotemark": [
      true,
      "single",
      "avoid-escape"
    ], // Enforces consistent single or double quoted string literals
    "radix": true, // Enforces the radix parameter of the parseInt
    "semicolon": [
      true,
      "always"
    ], // Enforces semicolons at the end of every statement
    "sort-object-literal-keys": false, // Checks that keys in object literals are declared in alphabetical order
    "switch-default": true, // Enforces a default case in switch statements
    "triple-equals": false, // Enforces === and !== in favor of == and !=
    "typedef": [
      true,
      "call-signature",
      "parameter",
      "arrow-parameter",
      "property-declaration",
      "variable-declaration",
      "member-variable-declaration"
    ], // Enforces type definitions to exist
    "typedef-whitespace": [
      true,
      {
        "call-signature": "nospace",
        "index-signature": "nospace",
        "parameter": "nospace",
        "property-declaration": "nospace",
        "variable-declaration": "nospace"
      }
    ], // Enforces spacing whitespace for type definitions
    "use-strict": true, // Enforces ECMAScript 5's strict mode
    "variable-name": [
      true,
      "ban-keywords",
      "check-format",
      "allow-trailing-underscore"
    ], // Allows only camelCased or UPPER_CASED variable names
    "whitespace": [
      true,
      "check-branch",
      "check-decl",
      "check-operator",
      "check-separator",
      "check-type"
    ], // Enforces spacing whitespace

    // Codelyser Rules
    "component-class-suffix": true, // Enforces all components having the suffix of 'Component'
    "component-selector-name": [ true, "kebab-case" ], // Enforces naming conventions for components
    "component-selector-prefix": [ true, "sg" ], // Enforces all components to have a uniform prefix
    "component-selector-type": [ true, "element" ], // Enforces the type of a component
    "directive-class-suffix": true, // Enforces all components having the suffix of 'Directive'
    "directive-selector-name": [ true, "camelCase" ], // Enforces naming conventions for directives
    "directive-selector-prefix": [ true, "sg" ], // Enforces all directives to have a uniform prefix
    "directive-selector-type": [ true, "attribute" ], // Enforces the type of a directive
    "no-attribute-parameter-decorator": true, // Disallows the @Attribute decorator in constructors
    "no-forward-ref": true, // Enforces avoidence of utilizing forwardRef's in classes and variables
    "no-input-rename": true, // Disallows the renaming of input properties
    "no-output-rename": true, // Disallows the renaming of output properties
    "pipe-naming": [ true, "camelCase", "sg" ], // Enforces naming conventions for Pipes
    "use-host-property-decorator": true, // Enforces the use of @HostBindings and @HostListeners instead of the host property
    "use-input-property-decorator": true, // Enforces the use of the @Input property decorator instead of the inputs property
    "use-life-cycle-interface": true, // Enforces all life cycle code using the lifecycle hook interfaces
    "use-output-property-decorator": true, // Enforces the use of the @Output property decorator instead of the outputs property
    "use-pipe-transform-interface": true // Enforces all pipes using the PipeTransform interface
  }
}
